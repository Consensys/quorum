//
// This plugin interface provides services to secure `geth` RPC servers, which includes:
//
// - TLS configuration to enable HTTPS/WSS servers
// - Authentication

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: security.proto

package proto

import (
	context "context"
	reflect "reflect"
	sync "sync"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// A wrapper message to logically group other messages
type TLSConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TLSConfiguration) Reset() {
	*x = TLSConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSConfiguration) ProtoMessage() {}

func (x *TLSConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_security_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSConfiguration.ProtoReflect.Descriptor instead.
func (*TLSConfiguration) Descriptor() ([]byte, []int) {
	return file_security_proto_rawDescGZIP(), []int{0}
}

//
// Representing a permission being extracted from access token by the plugin implementation.
// This permission is then stored in security context of a request and
// used internally to decide if the access is granted/denied
type GrantedAuthority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// `geth` RPC API namespace. E.g.: rpc, eth, admin, debug, ...
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// `geth` RPC API function. E.g.: nodeInfo, blockNumber, ...
	Method string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	// raw string of the the granted authority value. This gives plugin implementation freedom to interpret the value
	Raw string `protobuf:"bytes,3,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *GrantedAuthority) Reset() {
	*x = GrantedAuthority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantedAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantedAuthority) ProtoMessage() {}

func (x *GrantedAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_security_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantedAuthority.ProtoReflect.Descriptor instead.
func (*GrantedAuthority) Descriptor() ([]byte, []int) {
	return file_security_proto_rawDescGZIP(), []int{1}
}

func (x *GrantedAuthority) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *GrantedAuthority) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *GrantedAuthority) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

//
// Representing the access token for an authentication request
type AuthenticationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawToken []byte `protobuf:"bytes,1,opt,name=rawToken,proto3" json:"rawToken,omitempty"`
}

func (x *AuthenticationToken) Reset() {
	*x = AuthenticationToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticationToken) ProtoMessage() {}

func (x *AuthenticationToken) ProtoReflect() protoreflect.Message {
	mi := &file_security_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticationToken.ProtoReflect.Descriptor instead.
func (*AuthenticationToken) Descriptor() ([]byte, []int) {
	return file_security_proto_rawDescGZIP(), []int{2}
}

func (x *AuthenticationToken) GetRawToken() []byte {
	if x != nil {
		return x.RawToken
	}
	return nil
}

//
// Representing an authenticated principal after `AuthenticationToken` has been processed
type PreAuthenticatedAuthenticationToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawToken    []byte                 `protobuf:"bytes,1,opt,name=rawToken,proto3" json:"rawToken,omitempty"`
	ExpiredAt   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiredAt,proto3" json:"expiredAt,omitempty"`
	Authorities []*GrantedAuthority    `protobuf:"bytes,3,rep,name=authorities,proto3" json:"authorities,omitempty"`
}

func (x *PreAuthenticatedAuthenticationToken) Reset() {
	*x = PreAuthenticatedAuthenticationToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreAuthenticatedAuthenticationToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreAuthenticatedAuthenticationToken) ProtoMessage() {}

func (x *PreAuthenticatedAuthenticationToken) ProtoReflect() protoreflect.Message {
	mi := &file_security_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreAuthenticatedAuthenticationToken.ProtoReflect.Descriptor instead.
func (*PreAuthenticatedAuthenticationToken) Descriptor() ([]byte, []int) {
	return file_security_proto_rawDescGZIP(), []int{3}
}

func (x *PreAuthenticatedAuthenticationToken) GetRawToken() []byte {
	if x != nil {
		return x.RawToken
	}
	return nil
}

func (x *PreAuthenticatedAuthenticationToken) GetExpiredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiredAt
	}
	return nil
}

func (x *PreAuthenticatedAuthenticationToken) GetAuthorities() []*GrantedAuthority {
	if x != nil {
		return x.Authorities
	}
	return nil
}

// It's an empty Request received by RPC service
type TLSConfiguration_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TLSConfiguration_Request) Reset() {
	*x = TLSConfiguration_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSConfiguration_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSConfiguration_Request) ProtoMessage() {}

func (x *TLSConfiguration_Request) ProtoReflect() protoreflect.Message {
	mi := &file_security_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSConfiguration_Request.ProtoReflect.Descriptor instead.
func (*TLSConfiguration_Request) Descriptor() ([]byte, []int) {
	return file_security_proto_rawDescGZIP(), []int{0, 0}
}

// Response from RPC service
type TLSConfiguration_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *TLSConfiguration_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TLSConfiguration_Response) Reset() {
	*x = TLSConfiguration_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSConfiguration_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSConfiguration_Response) ProtoMessage() {}

func (x *TLSConfiguration_Response) ProtoReflect() protoreflect.Message {
	mi := &file_security_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSConfiguration_Response.ProtoReflect.Descriptor instead.
func (*TLSConfiguration_Response) Descriptor() ([]byte, []int) {
	return file_security_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TLSConfiguration_Response) GetData() *TLSConfiguration_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// TLS configuration data for `geth`
type TLSConfiguration_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Private key in PEM format
	KeyPem []byte `protobuf:"bytes,1,opt,name=keyPem,proto3" json:"keyPem,omitempty"`
	// Certificate in PEM format
	CertPem []byte `protobuf:"bytes,2,opt,name=certPem,proto3" json:"certPem,omitempty"`
	// List of cipher suites constants being supported by the server
	CipherSuites []uint32 `protobuf:"varint,3,rep,packed,name=cipherSuites,proto3" json:"cipherSuites,omitempty"`
}

func (x *TLSConfiguration_Data) Reset() {
	*x = TLSConfiguration_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_security_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSConfiguration_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSConfiguration_Data) ProtoMessage() {}

func (x *TLSConfiguration_Data) ProtoReflect() protoreflect.Message {
	mi := &file_security_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSConfiguration_Data.ProtoReflect.Descriptor instead.
func (*TLSConfiguration_Data) Descriptor() ([]byte, []int) {
	return file_security_proto_rawDescGZIP(), []int{0, 2}
}

func (x *TLSConfiguration_Data) GetKeyPem() []byte {
	if x != nil {
		return x.KeyPem
	}
	return nil
}

func (x *TLSConfiguration_Data) GetCertPem() []byte {
	if x != nil {
		return x.CertPem
	}
	return nil
}

func (x *TLSConfiguration_Data) GetCipherSuites() []uint32 {
	if x != nil {
		return x.CipherSuites
	}
	return nil
}

var File_security_proto protoreflect.FileDescriptor

var file_security_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x01, 0x0a, 0x10, 0x54, 0x4c, 0x53,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x09, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x6b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x65, 0x72, 0x74, 0x50, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x65, 0x72, 0x74, 0x50, 0x65, 0x6d,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75,
	0x69, 0x74, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x10, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0x31, 0x0a, 0x13,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xb6, 0x01, 0x0a, 0x23, 0x50, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x61, 0x77, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x32, 0x62, 0x0a, 0x16, 0x54, 0x4c, 0x53, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x6f, 0x0a, 0x15,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x1a, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x2d, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_security_proto_rawDescOnce sync.Once
	file_security_proto_rawDescData = file_security_proto_rawDesc
)

func file_security_proto_rawDescGZIP() []byte {
	file_security_proto_rawDescOnce.Do(func() {
		file_security_proto_rawDescData = protoimpl.X.CompressGZIP(file_security_proto_rawDescData)
	})
	return file_security_proto_rawDescData
}

var file_security_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_security_proto_goTypes = []interface{}{
	(*TLSConfiguration)(nil),                    // 0: proto.TLSConfiguration
	(*GrantedAuthority)(nil),                    // 1: proto.GrantedAuthority
	(*AuthenticationToken)(nil),                 // 2: proto.AuthenticationToken
	(*PreAuthenticatedAuthenticationToken)(nil), // 3: proto.PreAuthenticatedAuthenticationToken
	(*TLSConfiguration_Request)(nil),            // 4: proto.TLSConfiguration.Request
	(*TLSConfiguration_Response)(nil),           // 5: proto.TLSConfiguration.Response
	(*TLSConfiguration_Data)(nil),               // 6: proto.TLSConfiguration.Data
	(*timestamppb.Timestamp)(nil),               // 7: google.protobuf.Timestamp
}
var file_security_proto_depIdxs = []int32{
	7, // 0: proto.PreAuthenticatedAuthenticationToken.expiredAt:type_name -> google.protobuf.Timestamp
	1, // 1: proto.PreAuthenticatedAuthenticationToken.authorities:type_name -> proto.GrantedAuthority
	6, // 2: proto.TLSConfiguration.Response.data:type_name -> proto.TLSConfiguration.Data
	4, // 3: proto.TLSConfigurationSource.Get:input_type -> proto.TLSConfiguration.Request
	2, // 4: proto.AuthenticationManager.Authenticate:input_type -> proto.AuthenticationToken
	5, // 5: proto.TLSConfigurationSource.Get:output_type -> proto.TLSConfiguration.Response
	3, // 6: proto.AuthenticationManager.Authenticate:output_type -> proto.PreAuthenticatedAuthenticationToken
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_security_proto_init() }
func file_security_proto_init() {
	if File_security_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_security_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantedAuthority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticationToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreAuthenticatedAuthenticationToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSConfiguration_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSConfiguration_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_security_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSConfiguration_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_security_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_security_proto_goTypes,
		DependencyIndexes: file_security_proto_depIdxs,
		MessageInfos:      file_security_proto_msgTypes,
	}.Build()
	File_security_proto = out.File
	file_security_proto_rawDesc = nil
	file_security_proto_goTypes = nil
	file_security_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TLSConfigurationSourceClient is the client API for TLSConfigurationSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TLSConfigurationSourceClient interface {
	Get(ctx context.Context, in *TLSConfiguration_Request, opts ...grpc.CallOption) (*TLSConfiguration_Response, error)
}

type tLSConfigurationSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewTLSConfigurationSourceClient(cc grpc.ClientConnInterface) TLSConfigurationSourceClient {
	return &tLSConfigurationSourceClient{cc}
}

func (c *tLSConfigurationSourceClient) Get(ctx context.Context, in *TLSConfiguration_Request, opts ...grpc.CallOption) (*TLSConfiguration_Response, error) {
	out := new(TLSConfiguration_Response)
	err := c.cc.Invoke(ctx, "/proto.TLSConfigurationSource/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TLSConfigurationSourceServer is the server API for TLSConfigurationSource service.
type TLSConfigurationSourceServer interface {
	Get(context.Context, *TLSConfiguration_Request) (*TLSConfiguration_Response, error)
}

// UnimplementedTLSConfigurationSourceServer can be embedded to have forward compatible implementations.
type UnimplementedTLSConfigurationSourceServer struct {
}

func (*UnimplementedTLSConfigurationSourceServer) Get(context.Context, *TLSConfiguration_Request) (*TLSConfiguration_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterTLSConfigurationSourceServer(s *grpc.Server, srv TLSConfigurationSourceServer) {
	s.RegisterService(&_TLSConfigurationSource_serviceDesc, srv)
}

func _TLSConfigurationSource_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLSConfiguration_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TLSConfigurationSourceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TLSConfigurationSource/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TLSConfigurationSourceServer).Get(ctx, req.(*TLSConfiguration_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _TLSConfigurationSource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TLSConfigurationSource",
	HandlerType: (*TLSConfigurationSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TLSConfigurationSource_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security.proto",
}

// AuthenticationManagerClient is the client API for AuthenticationManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthenticationManagerClient interface {
	//
	// Perform authentication of the token. Return a token that contains expiry date and granted authorities
	Authenticate(ctx context.Context, in *AuthenticationToken, opts ...grpc.CallOption) (*PreAuthenticatedAuthenticationToken, error)
}

type authenticationManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationManagerClient(cc grpc.ClientConnInterface) AuthenticationManagerClient {
	return &authenticationManagerClient{cc}
}

func (c *authenticationManagerClient) Authenticate(ctx context.Context, in *AuthenticationToken, opts ...grpc.CallOption) (*PreAuthenticatedAuthenticationToken, error) {
	out := new(PreAuthenticatedAuthenticationToken)
	err := c.cc.Invoke(ctx, "/proto.AuthenticationManager/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationManagerServer is the server API for AuthenticationManager service.
type AuthenticationManagerServer interface {
	//
	// Perform authentication of the token. Return a token that contains expiry date and granted authorities
	Authenticate(context.Context, *AuthenticationToken) (*PreAuthenticatedAuthenticationToken, error)
}

// UnimplementedAuthenticationManagerServer can be embedded to have forward compatible implementations.
type UnimplementedAuthenticationManagerServer struct {
}

func (*UnimplementedAuthenticationManagerServer) Authenticate(context.Context, *AuthenticationToken) (*PreAuthenticatedAuthenticationToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}

func RegisterAuthenticationManagerServer(s *grpc.Server, srv AuthenticationManagerServer) {
	s.RegisterService(&_AuthenticationManager_serviceDesc, srv)
}

func _AuthenticationManager_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationManagerServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthenticationManager/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationManagerServer).Authenticate(ctx, req.(*AuthenticationToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthenticationManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthenticationManager",
	HandlerType: (*AuthenticationManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _AuthenticationManager_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "security.proto",
}
