// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package qlight is a generated GoMock package.
package qlight

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPluginTokenManager is a mock of PluginTokenManager interface.
type MockPluginTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockPluginTokenManagerMockRecorder
}

// MockPluginTokenManagerMockRecorder is the mock recorder for MockPluginTokenManager.
type MockPluginTokenManagerMockRecorder struct {
	mock *MockPluginTokenManager
}

// NewMockPluginTokenManager creates a new mock instance.
func NewMockPluginTokenManager(ctrl *gomock.Controller) *MockPluginTokenManager {
	mock := &MockPluginTokenManager{ctrl: ctrl}
	mock.recorder = &MockPluginTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginTokenManager) EXPECT() *MockPluginTokenManagerMockRecorder {
	return m.recorder
}

// PluginTokenManager mocks base method.
func (m *MockPluginTokenManager) PluginTokenManager(ctx context.Context) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginTokenManager", ctx)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PluginTokenManager indicates an expected call of PluginTokenManager.
func (mr *MockPluginTokenManagerMockRecorder) PluginTokenManager(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginTokenManager", reflect.TypeOf((*MockPluginTokenManager)(nil).PluginTokenManager), ctx)
}

// TokenRefresh mocks base method.
func (m *MockPluginTokenManager) TokenRefresh(ctx context.Context, currentToken, psi string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenRefresh", ctx, currentToken, psi)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenRefresh indicates an expected call of TokenRefresh.
func (mr *MockPluginTokenManagerMockRecorder) TokenRefresh(ctx, currentToken, psi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenRefresh", reflect.TypeOf((*MockPluginTokenManager)(nil).TokenRefresh), ctx, currentToken, psi)
}
