// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package plugin is a generated GoMock package.
package plugin

import (
	reflect "reflect"

	rpc "github.com/ethereum/go-ethereum/rpc"
	gomock "github.com/golang/mock/gomock"
)

// MockPluginManagerInterface is a mock of PluginManagerInterface interface.
type MockPluginManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPluginManagerInterfaceMockRecorder
}

// MockPluginManagerInterfaceMockRecorder is the mock recorder for MockPluginManagerInterface.
type MockPluginManagerInterfaceMockRecorder struct {
	mock *MockPluginManagerInterface
}

// NewMockPluginManagerInterface creates a new mock instance.
func NewMockPluginManagerInterface(ctrl *gomock.Controller) *MockPluginManagerInterface {
	mock := &MockPluginManagerInterface{ctrl: ctrl}
	mock.recorder = &MockPluginManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginManagerInterface) EXPECT() *MockPluginManagerInterfaceMockRecorder {
	return m.recorder
}

// APIs mocks base method.
func (m *MockPluginManagerInterface) APIs() []rpc.API {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIs")
	ret0, _ := ret[0].([]rpc.API)
	return ret0
}

// APIs indicates an expected call of APIs.
func (mr *MockPluginManagerInterfaceMockRecorder) APIs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockPluginManagerInterface)(nil).APIs))
}

// GetPluginTemplate mocks base method.
func (m *MockPluginManagerInterface) GetPluginTemplate(name PluginInterfaceName, v managedPlugin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPluginTemplate", name, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetPluginTemplate indicates an expected call of GetPluginTemplate.
func (mr *MockPluginManagerInterfaceMockRecorder) GetPluginTemplate(name, v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginTemplate", reflect.TypeOf((*MockPluginManagerInterface)(nil).GetPluginTemplate), name, v)
}

// IsEnabled mocks base method.
func (m *MockPluginManagerInterface) IsEnabled(name PluginInterfaceName) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockPluginManagerInterfaceMockRecorder) IsEnabled(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockPluginManagerInterface)(nil).IsEnabled), name)
}

// PluginsInfo mocks base method.
func (m *MockPluginManagerInterface) PluginsInfo() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginsInfo")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// PluginsInfo indicates an expected call of PluginsInfo.
func (mr *MockPluginManagerInterfaceMockRecorder) PluginsInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginsInfo", reflect.TypeOf((*MockPluginManagerInterface)(nil).PluginsInfo))
}

// Reload mocks base method.
func (m *MockPluginManagerInterface) Reload(name PluginInterfaceName) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reload", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reload indicates an expected call of Reload.
func (mr *MockPluginManagerInterfaceMockRecorder) Reload(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reload", reflect.TypeOf((*MockPluginManagerInterface)(nil).Reload), name)
}

// Start mocks base method.
func (m *MockPluginManagerInterface) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPluginManagerInterfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPluginManagerInterface)(nil).Start))
}

// Stop mocks base method.
func (m *MockPluginManagerInterface) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockPluginManagerInterfaceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPluginManagerInterface)(nil).Stop))
}
