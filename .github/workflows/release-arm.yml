name: ARM Release
on:
  workflow_dispatch:
    tags:
      - 'v*'
  push:
    tags:
      - 'v*'
env:
  GO_VERSION: 1.16
  GOPATH: ${{ github.workspace }}/go
  WORKING_DIR: ${{ github.workspace }}/go/src/github.com/ethereum/go-ethereum
jobs:
  docker-build:
    name: 'Build ARM Docker image'
    runs-on: ubuntu-18.04
    steps:
      - name: 'Check out project files'
        uses: actions/checkout@v2
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: 'Build docker image'
        id: build
        run: |
          output_dir=${{ runner.temp }}/docker
          mkdir -p $output_dir
          docker buildx build --output "type=image,push=false" --platform linux/arm64 -t quorumengineering/quorum:arm64 .
      - name: 'Upload workflow artifact - Docker image'
        uses: actions/upload-artifact@v1
        with:
          name: docker-image
          path: ${{ steps.build.outputs.output_dir }}
  build-binary:
    name: 'Build binary for ${{ matrix.os }}'
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-20.04", "macos-latest" ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Setup Go ${{ env.GO_VERSION }}'
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: 'Prepare environment'
        id: env
        run: |
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
          echo "::set-output name=key::$(go env GOOS)_$(go env GOARCH)"
          echo "::set-output name=version::${GITHUB_REF##*/}"
      - name: 'Check out project files'
        uses: actions/checkout@v2
        with:
          path: ${{ env.WORKING_DIR }}
      - name: 'Build geth'
        # For MacOS, We use gtar and run purge command to workaround issue
        # https://github.com/actions/virtual-environments/issues/2619
        id: build
        working-directory: ${{ env.WORKING_DIR }}
        run: |-
          make geth
          mkdir -p build/artifact
          tar_file=build/artifact/geth_${{ steps.env.outputs.version }}_${{ steps.env.outputs.key }}.tar.gz

          if [ "${{ matrix.os }}" == "macos-latest" ]; then
            sudo /usr/sbin/purge
            gtar cfvz ${tar_file} -C build/bin geth
          else
            tar cfvz ${tar_file} -C build/bin geth
          fi

          echo "::set-output name=tar_file::${tar_file}"
          echo "::set-output name=checksum::$(shasum -a 256 build/bin/geth | awk '{print $1}')"
      - name: 'Verify tarball'
        working-directory: ${{ env.WORKING_DIR }}
        run: |-
          cp ${{ steps.build.outputs.tar_file }} ${{ runner.temp }}
          pushd ${{ runner.temp}}
          tar xfvz *.tar.gz
          actual_checksum=$(shasum -a 256 geth | awk '{print $1}')
          echo "Checksum: ${actual_checksum}"
          popd
          if [ "${{ steps.build.outputs.checksum }}" != "${actual_checksum}" ]; then
            echo "::error::geth checksum validation fails"
            exit 1
          fi
      - name: 'Upload artifact'
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.WORKING_DIR }}/build/artifact
          name: ${{ steps.env.outputs.key }}
          if-no-files-found: error