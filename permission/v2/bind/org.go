// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bind

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OrgManagerMetaData contains all meta data concerning the OrgManager contract.
var OrgManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_porgId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_ultParent\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"OrgApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_porgId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_ultParent\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_status\",\"type\":\"uint256\"}],\"name\":\"OrgPendingApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_porgId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_ultParent\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"OrgSuspended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_porgId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_ultParent\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_level\",\"type\":\"uint256\"}],\"name\":\"OrgSuspensionRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"addOrg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_pOrgId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"addSubOrg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"approveOrg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_action\",\"type\":\"uint256\"}],\"name\":\"approveOrgStatusUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"checkOrgActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"checkOrgExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_orgStatus\",\"type\":\"uint256\"}],\"name\":\"checkOrgStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfOrgs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"getOrgDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgIndex\",\"type\":\"uint256\"}],\"name\":\"getOrgInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"getSubOrgIndexes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"}],\"name\":\"getUltimateParent\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_permUpgradable\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_breadth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depth\",\"type\":\"uint256\"}],\"name\":\"setUpOrg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_orgId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_action\",\"type\":\"uint256\"}],\"name\":\"updateOrg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040525f600160146101000a81548160ff021916908315150217905550600460025560046003555f600655348015610037575f80fd5b506142b2806100455f395ff3fe608060405234801561000f575f80fd5b50600436106100f3575f3560e01c80637755ebdd11610095578063e302831611610064578063e3028316146102a9578063f4d6d9f5146102c5578063f9953de5146102f9578063ffe40d1d14610315576100f3565b80637755ebdd146102235780638c8642df146102415780639e58eb9f14610271578063c4d66de81461028d576100f3565b80631f953480116100d15780631f953480146101735780633fd62ae71461018f5780635c4f32ee146101bf5780635e99f6e5146101f3576100f3565b80630cc27493146100f757806314f775f914610127578063177c8d8a14610143575b5f80fd5b610111600480360381019061010c9190612cc8565b610345565b60405161011e9190612d34565b60405180910390f35b610141600480360381019061013c9190612cc8565b610747565b005b61015d60048036038101906101589190612d4d565b610981565b60405161016a9190612e22565b60405180910390f35b61018d60048036038101906101889190612e42565b610b7b565b005b6101a960048036038101906101a49190612fe8565b610d84565b6040516101b69190613049565b60405180910390f35b6101d960048036038101906101d49190613062565b610f50565b6040516101ea95949392919061308d565b60405180910390f35b61020d60048036038101906102089190612d4d565b6111b8565b60405161021a91906131aa565b60405180910390f35b61022b611314565b6040516102389190612d34565b60405180910390f35b61025b600480360381019061025691906131ca565b611320565b6040516102689190613049565b60405180910390f35b61028b60048036038101906102869190613224565b6113e6565b005b6102a760048036038101906102a291906132ef565b611554565b005b6102c360048036038101906102be9190612d4d565b61177a565b005b6102df60048036038101906102da9190612d4d565b611a4e565b6040516102f095949392919061308d565b60405180910390f35b610313600480360381019061030e9190612d4d565b611dd7565b005b61032f600480360381019061032a9190612fe8565b611fc7565b60405161033c9190613049565b60405180910390f35b5f60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e32cf906040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103b0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103d4919061332e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610441576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610438906133a3565b60405180910390fd5b83838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506001151561049282611fc7565b1515146104d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cb9061340b565b60405180910390fd5b60018314806104e35750600283145b610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990613499565b60405180910390fd5b5f61056f86868080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061200a565b9050600160048281548110610587576105866134b7565b5b905f5260205f20906008020160060154146105d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90613554565b60405180910390fd5b5f80600186036105ee576002915060029050610600565b600286036105ff5760049150600390505b5b6001151561065189898080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505084611320565b151514610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068a906135e2565b60405180910390fd5b600186036106ec576106e788888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061208c565b610739565b61073888888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506121de565b5b809450505050509392505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e32cf906040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107b1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107d5919061332e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610842576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610839906133a3565b60405180910390fd5b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506001151561089382611fc7565b1515146108d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cc9061340b565b60405180910390fd5b6001820361092e5761092984848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050612330565b61097b565b61097a84848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061247e565b5b50505050565b606060015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e32cf906040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ed573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a11919061332e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a75906133a3565b60405180910390fd5b6004610acc84848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061200a565b81548110610add57610adc6134b7565b5b905f5260205f2090600802016004018054610af79061362d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b239061362d565b8015610b6e5780601f10610b4557610100808354040283529160200191610b6e565b820191905f5260205f20905b815481529060010190602001808311610b5157829003601f168201915b5050505050905092915050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e32cf906040518163ffffffff1660e01b8152600401602060405180830381865afa158015610be5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c09919061332e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6d906133a3565b60405180910390fd5b83838383604051602001610c8d94939291906136d5565b6040516020818303038152906040525f1515610ca882611fc7565b151514610cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce190613751565b60405180910390fd5b610d7d85858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505084848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506002806125cd565b5050505050565b5f8060055f84604051602001610d9a919061379f565b6040516020818303038152906040528051906020012081526020019081526020015f205414610f47575f610dcd8361200a565b9050600260048281548110610de557610de46134b7565b5b905f5260205f209060080201600101541480610e245750600360048281548110610e1257610e116134b7565b5b905f5260205f20906008020160010154145b15610f45575f610edc60048381548110610e4157610e406134b7565b5b905f5260205f2090600802016004018054610e5b9061362d565b80601f0160208091040260200160405190810160405280929190818152602001828054610e879061362d565b8015610ed25780601f10610ea957610100808354040283529160200191610ed2565b820191905f5260205f20905b815481529060010190602001808311610eb557829003601f168201915b505050505061200a565b9050600260048281548110610ef457610ef36134b7565b5b905f5260205f209060080201600101541480610f335750600360048281548110610f2157610f206134b7565b5b905f5260205f20906008020160010154145b15610f4357600192505050610f4b565b505b505b5f90505b919050565b60608060605f8060048681548110610f6b57610f6a6134b7565b5b905f5260205f2090600802015f0160048781548110610f8d57610f8c6134b7565b5b905f5260205f20906008020160020160048881548110610fb057610faf6134b7565b5b905f5260205f20906008020160040160048981548110610fd357610fd26134b7565b5b905f5260205f2090600802016006015460048a81548110610ff757610ff66134b7565b5b905f5260205f209060080201600101548480546110139061362d565b80601f016020809104026020016040519081016040528092919081815260200182805461103f9061362d565b801561108a5780601f106110615761010080835404028352916020019161108a565b820191905f5260205f20905b81548152906001019060200180831161106d57829003601f168201915b5050505050945083805461109d9061362d565b80601f01602080910402602001604051908101604052809291908181526020018280546110c99061362d565b80156111145780601f106110eb57610100808354040283529160200191611114565b820191905f5260205f20905b8154815290600101906020018083116110f757829003601f168201915b505050505093508280546111279061362d565b80601f01602080910402602001604051908101604052809291908181526020018280546111539061362d565b801561119e5780601f106111755761010080835404028352916020019161119e565b820191905f5260205f20905b81548152906001019060200180831161118157829003601f168201915b505050505092509450945094509450945091939590929450565b60606001151561120a84848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050611fc7565b15151461124c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112439061340b565b60405180910390fd5b5f61129984848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061200a565b9050600481815481106112af576112ae6134b7565b5b905f5260205f20906008020160070180548060200260200160405190810160405280929190818152602001828054801561130657602002820191905f5260205f20905b8154815260200190600101908083116112f2575b505050505091505092915050565b5f600480549050905090565b5f8060055f85604051602001611336919061379f565b6040516020818303038152906040528051906020012081526020019081526020015f205403611367575f90506113e0565b5f6113718461200a565b90505f60055f86604051602001611388919061379f565b6040516020818303038152906040528051906020012081526020019081526020015f2054141580156113dc575082600482815481106113ca576113c96134b7565b5b905f5260205f20906008020160010154145b9150505b92915050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e32cf906040518163ffffffff1660e01b8152600401602060405180830381865afa158015611450573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611474919061332e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146114e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d8906133a3565b60405180910390fd5b61154060405180602001604052805f81525085858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050600160026125cd565b806002819055508160038190555050505050565b5f61155d612bfc565b90505f815f0160089054906101000a900460ff161590505f825f015f9054906101000a900467ffffffffffffffff1690505f808267ffffffffffffffff161480156115a55750825b90505f60018367ffffffffffffffff161480156115d857505f3073ffffffffffffffffffffffffffffffffffffffff163b145b9050811580156115e6575080155b1561161d576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001855f015f6101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550831561166a576001855f0160086101000a81548160ff0219169083151502179055505b5f73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16036116d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116cf906137ff565b60405180910390fd5b8560015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508315611772575f855f0160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516117699190613872565b60405180910390a15b505050505050565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e32cf906040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117e4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611808919061332e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186c906133a3565b60405180910390fd5b600115156118c783838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506001611320565b151514611909576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611900906138d5565b60405180910390fd5b5f61195683838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061200a565b905060026004828154811061196e5761196d6134b7565b5b905f5260205f209060080201600101819055507fd705723a50859c9cc1d3953e10b8b9478820e7a62927ad3215897ed87b20591c600482815481106119b6576119b56134b7565b5b905f5260205f2090600802015f01600483815481106119d8576119d76134b7565b5b905f5260205f209060080201600201600484815481106119fb576119fa6134b7565b5b905f5260205f20906008020160040160048581548110611a1e57611a1d6134b7565b5b905f5260205f209060080201600601546002604051611a419594939291906139bf565b60405180910390a1505050565b60608060605f80611aa187878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f82011690508083019250505050505050611fc7565b611b245786865f8083838080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505092509091925060405180602001604052805f815250919060405180602001604052805f815250919094509450945094509450611dcd565b5f611b7188888080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f8201169050808301925050505050505061200a565b905060048181548110611b8757611b866134b7565b5b905f5260205f2090600802015f0160048281548110611ba957611ba86134b7565b5b905f5260205f20906008020160020160048381548110611bcc57611bcb6134b7565b5b905f5260205f20906008020160040160048481548110611bef57611bee6134b7565b5b905f5260205f2090600802016006015460048581548110611c1357611c126134b7565b5b905f5260205f20906008020160010154848054611c2f9061362d565b80601f0160208091040260200160405190810160405280929190818152602001828054611c5b9061362d565b8015611ca65780601f10611c7d57610100808354040283529160200191611ca6565b820191905f5260205f20905b815481529060010190602001808311611c8957829003601f168201915b50505050509450838054611cb99061362d565b80601f0160208091040260200160405190810160405280929190818152602001828054611ce59061362d565b8015611d305780601f10611d0757610100808354040283529160200191611d30565b820191905f5260205f20905b815481529060010190602001808311611d1357829003601f168201915b50505050509350828054611d439061362d565b80601f0160208091040260200160405190810160405280929190818152602001828054611d6f9061362d565b8015611dba5780601f10611d9157610100808354040283529160200191611dba565b820191905f5260205f20905b815481529060010190602001808311611d9d57829003601f168201915b5050505050925095509550955095509550505b9295509295909350565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e32cf906040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e41573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e65919061332e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611ed2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ec9906133a3565b60405180910390fd5b81818080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050505f1515611f2282611fc7565b151514611f64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5b90613751565b60405180910390fd5b611fc260405180602001604052805f81525084848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506001806125cd565b505050565b5f8060055f84604051602001611fdd919061379f565b6040516020818303038152906040528051906020012081526020019081526020015f205414159050919050565b5f8060055f84604051602001612020919061379f565b6040516020818303038152906040528051906020012081526020019081526020015f205490505f8103612076577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff915050612087565b6001816120839190613a52565b9150505b919050565b6001151561209b826002611320565b1515146120dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d490613af5565b60405180910390fd5b5f6120e78261200a565b90506003600482815481106120ff576120fe6134b7565b5b905f5260205f209060080201600101819055507f0e8b7be64e0c730234ba2cd252b227fb481d7a247ba806d1941144c535bf054b60048281548110612147576121466134b7565b5b905f5260205f2090600802015f0160048381548110612169576121686134b7565b5b905f5260205f2090600802016002016004848154811061218c5761218b6134b7565b5b905f5260205f209060080201600401600485815481106121af576121ae6134b7565b5b905f5260205f2090600802016006015460036040516121d2959493929190613b4c565b60405180910390a15050565b600115156121ed826004611320565b15151461222f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222690613bfc565b60405180910390fd5b5f6122398261200a565b9050600560048281548110612251576122506134b7565b5b905f5260205f209060080201600101819055507f0e8b7be64e0c730234ba2cd252b227fb481d7a247ba806d1941144c535bf054b60048281548110612299576122986134b7565b5b905f5260205f2090600802015f01600483815481106122bb576122ba6134b7565b5b905f5260205f209060080201600201600484815481106122de576122dd6134b7565b5b905f5260205f20906008020160040160048581548110612301576123006134b7565b5b905f5260205f209060080201600601546005604051612324959493929190613c53565b60405180910390a15050565b6001151561233f826003611320565b151514612381576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612378906138d5565b60405180910390fd5b5f61238b8261200a565b905060048082815481106123a2576123a16134b7565b5b905f5260205f209060080201600101819055507f73ccf8d6c8385bf5347269bd59712da33183c1a5e1702494bcdb87d0f4674d96600482815481106123ea576123e96134b7565b5b905f5260205f2090600802015f016004838154811061240c5761240b6134b7565b5b905f5260205f2090600802016002016004848154811061242f5761242e6134b7565b5b905f5260205f20906008020160040160048581548110612452576124516134b7565b5b905f5260205f209060080201600601546040516124729493929190613cb9565b60405180910390a15050565b6001151561248d826005611320565b1515146124cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c6906138d5565b60405180910390fd5b5f6124d98261200a565b90506002600482815481106124f1576124f06134b7565b5b905f5260205f209060080201600101819055507f882f030c609566cd82918a97d457fd48f9cfcefd11282e2654cde3f94579c15f60048281548110612539576125386134b7565b5b905f5260205f2090600802015f016004838154811061255b5761255a6134b7565b5b905f5260205f2090600802016002016004848154811061257e5761257d6134b7565b5b905f5260205f209060080201600401600485815481106125a1576125a06134b7565b5b905f5260205f209060080201600601546040516125c19493929190613cb9565b60405180910390a15050565b5f805f6001850361260657856040516020016125e9919061379f565b60405160208183030381529060405280519060200120915061265b565b86604051602001612617919061379f565b6040516020818303038152906040528051906020012092508686604051602001612642929190613d11565b6040516020818303038152906040528051906020012091505b60065f81548092919061266d90613d3f565b919050555060065460055f8481526020019081526020015f20819055505f6004805490509050600460018160018154018082558091505003905f5260205f209050506001860361276e5785600482815481106126cc576126cb6134b7565b5b905f5260205f209060080201600601819055505f600482815481106126f4576126f36134b7565b5b905f5260205f20906008020160050181905550866004828154811061271c5761271b6134b7565b5b905f5260205f20906008020160030190816127379190613f08565b50866004828154811061274d5761274c6134b7565b5b905f5260205f20906008020160040190816127689190613f08565b506129cb565b600160055f8681526020019081526020015f205461278c9190613a52565b9150600354600483815481106127a5576127a46134b7565b5b905f5260205f20906008020160070180549050106127f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127ef90614021565b60405180910390fd5b6002546004838154811061280f5761280e6134b7565b5b905f5260205f209060080201600601541061285f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285690614089565b60405180910390fd5b600160048381548110612875576128746134b7565b5b905f5260205f2090600802016006015461288f91906140a7565b600482815481106128a3576128a26134b7565b5b905f5260205f2090600802016006018190555081600482815481106128cb576128ca6134b7565b5b905f5260205f20906008020160050181905550600482815481106128f2576128f16134b7565b5b905f5260205f20906008020160040160048281548110612915576129146134b7565b5b905f5260205f20906008020160040190816129309190614101565b5060048281548110612945576129446134b7565b5b905f5260205f20906008020160070181908060018154018082558091505060019003905f5260205f20015f9091909190915055878760405160200161298b929190613d11565b604051602081830303815290604052600482815481106129ae576129ad6134b7565b5b905f5260205f20906008020160030190816129c99190613f08565b505b86600482815481106129e0576129df6134b7565b5b905f5260205f2090600802015f0190816129fa9190613f08565b508760048281548110612a1057612a0f6134b7565b5b905f5260205f2090600802016002019081612a2b9190613f08565b508460048281548110612a4157612a406134b7565b5b905f5260205f2090600802016001018190555060018503612b29577f0e8b7be64e0c730234ba2cd252b227fb481d7a247ba806d1941144c535bf054b60048281548110612a9157612a906134b7565b5b905f5260205f2090600802015f0160048381548110612ab357612ab26134b7565b5b905f5260205f20906008020160020160048481548110612ad657612ad56134b7565b5b905f5260205f20906008020160040160048581548110612af957612af86134b7565b5b905f5260205f209060080201600601546001604051612b1c959493929190614216565b60405180910390a1612bf2565b7fd705723a50859c9cc1d3953e10b8b9478820e7a62927ad3215897ed87b20591c60048281548110612b5e57612b5d6134b7565b5b905f5260205f2090600802015f0160048381548110612b8057612b7f6134b7565b5b905f5260205f20906008020160020160048481548110612ba357612ba26134b7565b5b905f5260205f20906008020160040160048581548110612bc657612bc56134b7565b5b905f5260205f209060080201600601546002604051612be99594939291906139bf565b60405180910390a15b5050505050505050565b5f7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112612c5557612c54612c34565b5b8235905067ffffffffffffffff811115612c7257612c71612c38565b5b602083019150836001820283011115612c8e57612c8d612c3c565b5b9250929050565b5f819050919050565b612ca781612c95565b8114612cb1575f80fd5b50565b5f81359050612cc281612c9e565b92915050565b5f805f60408486031215612cdf57612cde612c2c565b5b5f84013567ffffffffffffffff811115612cfc57612cfb612c30565b5b612d0886828701612c40565b93509350506020612d1b86828701612cb4565b9150509250925092565b612d2e81612c95565b82525050565b5f602082019050612d475f830184612d25565b92915050565b5f8060208385031215612d6357612d62612c2c565b5b5f83013567ffffffffffffffff811115612d8057612d7f612c30565b5b612d8c85828601612c40565b92509250509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015612dcf578082015181840152602081019050612db4565b5f8484015250505050565b5f601f19601f8301169050919050565b5f612df482612d98565b612dfe8185612da2565b9350612e0e818560208601612db2565b612e1781612dda565b840191505092915050565b5f6020820190508181035f830152612e3a8184612dea565b905092915050565b5f805f8060408587031215612e5a57612e59612c2c565b5b5f85013567ffffffffffffffff811115612e7757612e76612c30565b5b612e8387828801612c40565b9450945050602085013567ffffffffffffffff811115612ea657612ea5612c30565b5b612eb287828801612c40565b925092505092959194509250565b5f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b612efa82612dda565b810181811067ffffffffffffffff82111715612f1957612f18612ec4565b5b80604052505050565b5f612f2b612c23565b9050612f378282612ef1565b919050565b5f67ffffffffffffffff821115612f5657612f55612ec4565b5b612f5f82612dda565b9050602081019050919050565b828183375f83830152505050565b5f612f8c612f8784612f3c565b612f22565b905082815260208101848484011115612fa857612fa7612ec0565b5b612fb3848285612f6c565b509392505050565b5f82601f830112612fcf57612fce612c34565b5b8135612fdf848260208601612f7a565b91505092915050565b5f60208284031215612ffd57612ffc612c2c565b5b5f82013567ffffffffffffffff81111561301a57613019612c30565b5b61302684828501612fbb565b91505092915050565b5f8115159050919050565b6130438161302f565b82525050565b5f60208201905061305c5f83018461303a565b92915050565b5f6020828403121561307757613076612c2c565b5b5f61308484828501612cb4565b91505092915050565b5f60a0820190508181035f8301526130a58188612dea565b905081810360208301526130b98187612dea565b905081810360408301526130cd8186612dea565b90506130dc6060830185612d25565b6130e96080830184612d25565b9695505050505050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61312581612c95565b82525050565b5f613136838361311c565b60208301905092915050565b5f602082019050919050565b5f613158826130f3565b61316281856130fd565b935061316d8361310d565b805f5b8381101561319d578151613184888261312b565b975061318f83613142565b925050600181019050613170565b5085935050505092915050565b5f6020820190508181035f8301526131c2818461314e565b905092915050565b5f80604083850312156131e0576131df612c2c565b5b5f83013567ffffffffffffffff8111156131fd576131fc612c30565b5b61320985828601612fbb565b925050602061321a85828601612cb4565b9150509250929050565b5f805f806060858703121561323c5761323b612c2c565b5b5f85013567ffffffffffffffff81111561325957613258612c30565b5b61326587828801612c40565b9450945050602061327887828801612cb4565b925050604061328987828801612cb4565b91505092959194509250565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6132be82613295565b9050919050565b6132ce816132b4565b81146132d8575f80fd5b50565b5f813590506132e9816132c5565b92915050565b5f6020828403121561330457613303612c2c565b5b5f613311848285016132db565b91505092915050565b5f81519050613328816132c5565b92915050565b5f6020828403121561334357613342612c2c565b5b5f6133508482850161331a565b91505092915050565b7f696e76616c69642063616c6c65720000000000000000000000000000000000005f82015250565b5f61338d600e83612da2565b915061339882613359565b602082019050919050565b5f6020820190508181035f8301526133ba81613381565b9050919050565b7f6f726720646f6573206e6f7420657869737400000000000000000000000000005f82015250565b5f6133f5601283612da2565b9150613400826133c1565b602082019050919050565b5f6020820190508181035f830152613422816133e9565b9050919050565b7f696e76616c696420616374696f6e2e206f7065726174696f6e206e6f7420616c5f8201527f6c6f776564000000000000000000000000000000000000000000000000000000602082015250565b5f613483602583612da2565b915061348e82613429565b604082019050919050565b5f6020820190508181035f8301526134b081613477565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f6e6f742061206d6173746572206f72672e206f7065726174696f6e206e6f74205f8201527f616c6c6f77656400000000000000000000000000000000000000000000000000602082015250565b5f61353e602783612da2565b9150613549826134e4565b604082019050919050565b5f6020820190508181035f83015261356b81613532565b9050919050565b7f6f72672073746174757320646f6573206e6f7420616c6c6f7720746865206f705f8201527f65726174696f6e00000000000000000000000000000000000000000000000000602082015250565b5f6135cc602783612da2565b91506135d782613572565b604082019050919050565b5f6020820190508181035f8301526135f9816135c0565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061364457607f821691505b60208210810361365757613656613600565b5b50919050565b5f81905092915050565b5f613672838561365d565b935061367f838584612f6c565b82840190509392505050565b7f2e000000000000000000000000000000000000000000000000000000000000005f82015250565b5f6136bf60018361365d565b91506136ca8261368b565b600182019050919050565b5f6136e1828688613667565b91506136ec826136b3565b91506136f9828486613667565b915081905095945050505050565b7f6f726720657869737473000000000000000000000000000000000000000000005f82015250565b5f61373b600a83612da2565b915061374682613707565b602082019050919050565b5f6020820190508181035f8301526137688161372f565b9050919050565b5f61377982612d98565b613783818561365d565b9350613793818560208601612db2565b80840191505092915050565b5f6137aa828461376f565b915081905092915050565b7f43616e6e6f742073657420746f20656d707479206164647265737300000000005f82015250565b5f6137e9601b83612da2565b91506137f4826137b5565b602082019050919050565b5f6020820190508181035f830152613816816137dd565b9050919050565b5f819050919050565b5f67ffffffffffffffff82169050919050565b5f819050919050565b5f61385c6138576138528461381d565b613839565b613826565b9050919050565b61386c81613842565b82525050565b5f6020820190506138855f830184613863565b92915050565b7f6e6f7468696e6720746f20617070726f766500000000000000000000000000005f82015250565b5f6138bf601283612da2565b91506138ca8261388b565b602082019050919050565b5f6020820190508181035f8301526138ec816138b3565b9050919050565b5f819050815f5260205f209050919050565b5f81546139118161362d565b61391b8186612da2565b9450600182165f8114613935576001811461394b5761397d565b60ff19831686528115156020028601935061397d565b613954856138f3565b5f5b8381101561397557815481890152600182019150602081019050613956565b808801955050505b50505092915050565b5f819050919050565b5f6139a96139a461399f84613986565b613839565b612c95565b9050919050565b6139b98161398f565b82525050565b5f60a0820190508181035f8301526139d78188613905565b905081810360208301526139eb8187613905565b905081810360408301526139ff8186613905565b9050613a0e6060830185612d25565b613a1b60808301846139b0565b9695505050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f613a5c82612c95565b9150613a6783612c95565b9250828203905081811115613a7f57613a7e613a25565b5b92915050565b7f6f7267206e6f7420696e20617070726f766564207374617475732e206f7065725f8201527f6174696f6e2063616e6e6f7420626520646f6e65000000000000000000000000602082015250565b5f613adf603483612da2565b9150613aea82613a85565b604082019050919050565b5f6020820190508181035f830152613b0c81613ad3565b9050919050565b5f819050919050565b5f613b36613b31613b2c84613b13565b613839565b612c95565b9050919050565b613b4681613b1c565b82525050565b5f60a0820190508181035f830152613b648188613905565b90508181036020830152613b788187613905565b90508181036040830152613b8c8186613905565b9050613b9b6060830185612d25565b613ba86080830184613b3d565b9695505050505050565b7f6f7267206e6f7420696e2073757370656e6465642073746174650000000000005f82015250565b5f613be6601a83612da2565b9150613bf182613bb2565b602082019050919050565b5f6020820190508181035f830152613c1381613bda565b9050919050565b5f819050919050565b5f613c3d613c38613c3384613c1a565b613839565b612c95565b9050919050565b613c4d81613c23565b82525050565b5f60a0820190508181035f830152613c6b8188613905565b90508181036020830152613c7f8187613905565b90508181036040830152613c938186613905565b9050613ca26060830185612d25565b613caf6080830184613c44565b9695505050505050565b5f6080820190508181035f830152613cd18187613905565b90508181036020830152613ce58186613905565b90508181036040830152613cf98185613905565b9050613d086060830184612d25565b95945050505050565b5f613d1c828561376f565b9150613d27826136b3565b9150613d33828461376f565b91508190509392505050565b5f613d4982612c95565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613d7b57613d7a613a25565b5b600182019050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302613dd07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613d95565b613dda8683613d95565b95508019841693508086168417925050509392505050565b5f613e0c613e07613e0284612c95565b613839565b612c95565b9050919050565b5f819050919050565b613e2583613df2565b613e39613e3182613e13565b848454613da1565b825550505050565b5f90565b613e4d613e41565b613e58818484613e1c565b505050565b5b81811015613e7b57613e705f82613e45565b600181019050613e5e565b5050565b601f821115613ec057613e91816138f3565b613e9a84613d86565b81016020851015613ea9578190505b613ebd613eb585613d86565b830182613e5d565b50505b505050565b5f82821c905092915050565b5f613ee05f1984600802613ec5565b1980831691505092915050565b5f613ef88383613ed1565b9150826002028217905092915050565b613f1182612d98565b67ffffffffffffffff811115613f2a57613f29612ec4565b5b613f34825461362d565b613f3f828285613e7f565b5f60209050601f831160018114613f70575f8415613f5e578287015190505b613f688582613eed565b865550613fcf565b601f198416613f7e866138f3565b5f5b82811015613fa557848901518255600182019150602085019450602081019050613f80565b86831015613fc25784890151613fbe601f891682613ed1565b8355505b6001600288020188555050505b505050505050565b7f62726561647468206c6576656c206578636565646564000000000000000000005f82015250565b5f61400b601683612da2565b915061401682613fd7565b602082019050919050565b5f6020820190508181035f83015261403881613fff565b9050919050565b7f6465707468206c6576656c2065786365656465640000000000000000000000005f82015250565b5f614073601483612da2565b915061407e8261403f565b602082019050919050565b5f6020820190508181035f8301526140a081614067565b9050919050565b5f6140b182612c95565b91506140bc83612c95565b92508282019050808211156140d4576140d3613a25565b5b92915050565b5f815490506140e88161362d565b9050919050565b5f819050815f5260205f209050919050565b81810361410f5750506141e4565b614118826140da565b67ffffffffffffffff81111561413157614130612ec4565b5b61413b825461362d565b614146828285613e7f565b5f601f831160018114614173575f8415614161578287015490505b61416b8582613eed565b8655506141dd565b601f198416614181876140ef565b965061418c866138f3565b5f5b828110156141b35784890154825560018201915060018501945060208101905061418e565b868310156141d057848901546141cc601f891682613ed1565b8355505b6001600288020188555050505b5050505050505b565b5f6142006141fb6141f68461381d565b613839565b612c95565b9050919050565b614210816141e6565b82525050565b5f60a0820190508181035f83015261422e8188613905565b905081810360208301526142428187613905565b905081810360408301526142568186613905565b90506142656060830185612d25565b6142726080830184614207565b969550505050505056fea26469706673582212205db12641df7b311c627ca29f3ad1b42e3c6cb20630f09b54610cea91909b63b064736f6c63430008180033",
}

// OrgManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use OrgManagerMetaData.ABI instead.
var OrgManagerABI = OrgManagerMetaData.ABI

var OrgManagerParsedABI, _ = abi.JSON(strings.NewReader(OrgManagerABI))

// OrgManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use OrgManagerMetaData.Bin instead.
var OrgManagerBin = OrgManagerMetaData.Bin

// DeployOrgManager deploys a new Ethereum contract, binding an instance of OrgManager to it.
func DeployOrgManager(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *OrgManager, error) {
	parsed, err := OrgManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(OrgManagerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &OrgManager{OrgManagerCaller: OrgManagerCaller{contract: contract}, OrgManagerTransactor: OrgManagerTransactor{contract: contract}, OrgManagerFilterer: OrgManagerFilterer{contract: contract}}, nil
}

// OrgManager is an auto generated Go binding around an Ethereum contract.
type OrgManager struct {
	OrgManagerCaller     // Read-only binding to the contract
	OrgManagerTransactor // Write-only binding to the contract
	OrgManagerFilterer   // Log filterer for contract events
}

// OrgManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type OrgManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrgManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OrgManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrgManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OrgManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OrgManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OrgManagerSession struct {
	Contract     *OrgManager       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OrgManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OrgManagerCallerSession struct {
	Contract *OrgManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// OrgManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OrgManagerTransactorSession struct {
	Contract     *OrgManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// OrgManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type OrgManagerRaw struct {
	Contract *OrgManager // Generic contract binding to access the raw methods on
}

// OrgManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OrgManagerCallerRaw struct {
	Contract *OrgManagerCaller // Generic read-only contract binding to access the raw methods on
}

// OrgManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OrgManagerTransactorRaw struct {
	Contract *OrgManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOrgManager creates a new instance of OrgManager, bound to a specific deployed contract.
func NewOrgManager(address common.Address, backend bind.ContractBackend) (*OrgManager, error) {
	contract, err := bindOrgManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &OrgManager{OrgManagerCaller: OrgManagerCaller{contract: contract}, OrgManagerTransactor: OrgManagerTransactor{contract: contract}, OrgManagerFilterer: OrgManagerFilterer{contract: contract}}, nil
}

// NewOrgManagerCaller creates a new read-only instance of OrgManager, bound to a specific deployed contract.
func NewOrgManagerCaller(address common.Address, caller bind.ContractCaller) (*OrgManagerCaller, error) {
	contract, err := bindOrgManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OrgManagerCaller{contract: contract}, nil
}

// NewOrgManagerTransactor creates a new write-only instance of OrgManager, bound to a specific deployed contract.
func NewOrgManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*OrgManagerTransactor, error) {
	contract, err := bindOrgManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OrgManagerTransactor{contract: contract}, nil
}

// NewOrgManagerFilterer creates a new log filterer instance of OrgManager, bound to a specific deployed contract.
func NewOrgManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*OrgManagerFilterer, error) {
	contract, err := bindOrgManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OrgManagerFilterer{contract: contract}, nil
}

// bindOrgManager binds a generic wrapper to an already deployed contract.
func bindOrgManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OrgManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OrgManager *OrgManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OrgManager.Contract.OrgManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OrgManager *OrgManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrgManager.Contract.OrgManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OrgManager *OrgManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OrgManager.Contract.OrgManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_OrgManager *OrgManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _OrgManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_OrgManager *OrgManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _OrgManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_OrgManager *OrgManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _OrgManager.Contract.contract.Transact(opts, method, params...)
}

// CheckOrgActive is a free data retrieval call binding the contract method 0x3fd62ae7.
//
// Solidity: function checkOrgActive(string _orgId) view returns(bool)
func (_OrgManager *OrgManagerCaller) CheckOrgActive(opts *bind.CallOpts, _orgId string) (bool, error) {
	var out []interface{}
	err := _OrgManager.contract.Call(opts, &out, "checkOrgActive", _orgId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckOrgActive is a free data retrieval call binding the contract method 0x3fd62ae7.
//
// Solidity: function checkOrgActive(string _orgId) view returns(bool)
func (_OrgManager *OrgManagerSession) CheckOrgActive(_orgId string) (bool, error) {
	return _OrgManager.Contract.CheckOrgActive(&_OrgManager.CallOpts, _orgId)
}

// CheckOrgActive is a free data retrieval call binding the contract method 0x3fd62ae7.
//
// Solidity: function checkOrgActive(string _orgId) view returns(bool)
func (_OrgManager *OrgManagerCallerSession) CheckOrgActive(_orgId string) (bool, error) {
	return _OrgManager.Contract.CheckOrgActive(&_OrgManager.CallOpts, _orgId)
}

// CheckOrgExists is a free data retrieval call binding the contract method 0xffe40d1d.
//
// Solidity: function checkOrgExists(string _orgId) view returns(bool)
func (_OrgManager *OrgManagerCaller) CheckOrgExists(opts *bind.CallOpts, _orgId string) (bool, error) {
	var out []interface{}
	err := _OrgManager.contract.Call(opts, &out, "checkOrgExists", _orgId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckOrgExists is a free data retrieval call binding the contract method 0xffe40d1d.
//
// Solidity: function checkOrgExists(string _orgId) view returns(bool)
func (_OrgManager *OrgManagerSession) CheckOrgExists(_orgId string) (bool, error) {
	return _OrgManager.Contract.CheckOrgExists(&_OrgManager.CallOpts, _orgId)
}

// CheckOrgExists is a free data retrieval call binding the contract method 0xffe40d1d.
//
// Solidity: function checkOrgExists(string _orgId) view returns(bool)
func (_OrgManager *OrgManagerCallerSession) CheckOrgExists(_orgId string) (bool, error) {
	return _OrgManager.Contract.CheckOrgExists(&_OrgManager.CallOpts, _orgId)
}

// CheckOrgStatus is a free data retrieval call binding the contract method 0x8c8642df.
//
// Solidity: function checkOrgStatus(string _orgId, uint256 _orgStatus) view returns(bool)
func (_OrgManager *OrgManagerCaller) CheckOrgStatus(opts *bind.CallOpts, _orgId string, _orgStatus *big.Int) (bool, error) {
	var out []interface{}
	err := _OrgManager.contract.Call(opts, &out, "checkOrgStatus", _orgId, _orgStatus)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckOrgStatus is a free data retrieval call binding the contract method 0x8c8642df.
//
// Solidity: function checkOrgStatus(string _orgId, uint256 _orgStatus) view returns(bool)
func (_OrgManager *OrgManagerSession) CheckOrgStatus(_orgId string, _orgStatus *big.Int) (bool, error) {
	return _OrgManager.Contract.CheckOrgStatus(&_OrgManager.CallOpts, _orgId, _orgStatus)
}

// CheckOrgStatus is a free data retrieval call binding the contract method 0x8c8642df.
//
// Solidity: function checkOrgStatus(string _orgId, uint256 _orgStatus) view returns(bool)
func (_OrgManager *OrgManagerCallerSession) CheckOrgStatus(_orgId string, _orgStatus *big.Int) (bool, error) {
	return _OrgManager.Contract.CheckOrgStatus(&_OrgManager.CallOpts, _orgId, _orgStatus)
}

// GetNumberOfOrgs is a free data retrieval call binding the contract method 0x7755ebdd.
//
// Solidity: function getNumberOfOrgs() view returns(uint256)
func (_OrgManager *OrgManagerCaller) GetNumberOfOrgs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _OrgManager.contract.Call(opts, &out, "getNumberOfOrgs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNumberOfOrgs is a free data retrieval call binding the contract method 0x7755ebdd.
//
// Solidity: function getNumberOfOrgs() view returns(uint256)
func (_OrgManager *OrgManagerSession) GetNumberOfOrgs() (*big.Int, error) {
	return _OrgManager.Contract.GetNumberOfOrgs(&_OrgManager.CallOpts)
}

// GetNumberOfOrgs is a free data retrieval call binding the contract method 0x7755ebdd.
//
// Solidity: function getNumberOfOrgs() view returns(uint256)
func (_OrgManager *OrgManagerCallerSession) GetNumberOfOrgs() (*big.Int, error) {
	return _OrgManager.Contract.GetNumberOfOrgs(&_OrgManager.CallOpts)
}

// GetOrgDetails is a free data retrieval call binding the contract method 0xf4d6d9f5.
//
// Solidity: function getOrgDetails(string _orgId) view returns(string, string, string, uint256, uint256)
func (_OrgManager *OrgManagerCaller) GetOrgDetails(opts *bind.CallOpts, _orgId string) (string, string, string, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _OrgManager.contract.Call(opts, &out, "getOrgDetails", _orgId)

	if err != nil {
		return *new(string), *new(string), *new(string), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	out2 := *abi.ConvertType(out[2], new(string)).(*string)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, out4, err

}

// GetOrgDetails is a free data retrieval call binding the contract method 0xf4d6d9f5.
//
// Solidity: function getOrgDetails(string _orgId) view returns(string, string, string, uint256, uint256)
func (_OrgManager *OrgManagerSession) GetOrgDetails(_orgId string) (string, string, string, *big.Int, *big.Int, error) {
	return _OrgManager.Contract.GetOrgDetails(&_OrgManager.CallOpts, _orgId)
}

// GetOrgDetails is a free data retrieval call binding the contract method 0xf4d6d9f5.
//
// Solidity: function getOrgDetails(string _orgId) view returns(string, string, string, uint256, uint256)
func (_OrgManager *OrgManagerCallerSession) GetOrgDetails(_orgId string) (string, string, string, *big.Int, *big.Int, error) {
	return _OrgManager.Contract.GetOrgDetails(&_OrgManager.CallOpts, _orgId)
}

// GetOrgInfo is a free data retrieval call binding the contract method 0x5c4f32ee.
//
// Solidity: function getOrgInfo(uint256 _orgIndex) view returns(string, string, string, uint256, uint256)
func (_OrgManager *OrgManagerCaller) GetOrgInfo(opts *bind.CallOpts, _orgIndex *big.Int) (string, string, string, *big.Int, *big.Int, error) {
	var out []interface{}
	err := _OrgManager.contract.Call(opts, &out, "getOrgInfo", _orgIndex)

	if err != nil {
		return *new(string), *new(string), *new(string), *new(*big.Int), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)
	out1 := *abi.ConvertType(out[1], new(string)).(*string)
	out2 := *abi.ConvertType(out[2], new(string)).(*string)
	out3 := *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	out4 := *abi.ConvertType(out[4], new(*big.Int)).(**big.Int)

	return out0, out1, out2, out3, out4, err

}

// GetOrgInfo is a free data retrieval call binding the contract method 0x5c4f32ee.
//
// Solidity: function getOrgInfo(uint256 _orgIndex) view returns(string, string, string, uint256, uint256)
func (_OrgManager *OrgManagerSession) GetOrgInfo(_orgIndex *big.Int) (string, string, string, *big.Int, *big.Int, error) {
	return _OrgManager.Contract.GetOrgInfo(&_OrgManager.CallOpts, _orgIndex)
}

// GetOrgInfo is a free data retrieval call binding the contract method 0x5c4f32ee.
//
// Solidity: function getOrgInfo(uint256 _orgIndex) view returns(string, string, string, uint256, uint256)
func (_OrgManager *OrgManagerCallerSession) GetOrgInfo(_orgIndex *big.Int) (string, string, string, *big.Int, *big.Int, error) {
	return _OrgManager.Contract.GetOrgInfo(&_OrgManager.CallOpts, _orgIndex)
}

// GetSubOrgIndexes is a free data retrieval call binding the contract method 0x5e99f6e5.
//
// Solidity: function getSubOrgIndexes(string _orgId) view returns(uint256[])
func (_OrgManager *OrgManagerCaller) GetSubOrgIndexes(opts *bind.CallOpts, _orgId string) ([]*big.Int, error) {
	var out []interface{}
	err := _OrgManager.contract.Call(opts, &out, "getSubOrgIndexes", _orgId)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// GetSubOrgIndexes is a free data retrieval call binding the contract method 0x5e99f6e5.
//
// Solidity: function getSubOrgIndexes(string _orgId) view returns(uint256[])
func (_OrgManager *OrgManagerSession) GetSubOrgIndexes(_orgId string) ([]*big.Int, error) {
	return _OrgManager.Contract.GetSubOrgIndexes(&_OrgManager.CallOpts, _orgId)
}

// GetSubOrgIndexes is a free data retrieval call binding the contract method 0x5e99f6e5.
//
// Solidity: function getSubOrgIndexes(string _orgId) view returns(uint256[])
func (_OrgManager *OrgManagerCallerSession) GetSubOrgIndexes(_orgId string) ([]*big.Int, error) {
	return _OrgManager.Contract.GetSubOrgIndexes(&_OrgManager.CallOpts, _orgId)
}

// GetUltimateParent is a free data retrieval call binding the contract method 0x177c8d8a.
//
// Solidity: function getUltimateParent(string _orgId) view returns(string)
func (_OrgManager *OrgManagerCaller) GetUltimateParent(opts *bind.CallOpts, _orgId string) (string, error) {
	var out []interface{}
	err := _OrgManager.contract.Call(opts, &out, "getUltimateParent", _orgId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetUltimateParent is a free data retrieval call binding the contract method 0x177c8d8a.
//
// Solidity: function getUltimateParent(string _orgId) view returns(string)
func (_OrgManager *OrgManagerSession) GetUltimateParent(_orgId string) (string, error) {
	return _OrgManager.Contract.GetUltimateParent(&_OrgManager.CallOpts, _orgId)
}

// GetUltimateParent is a free data retrieval call binding the contract method 0x177c8d8a.
//
// Solidity: function getUltimateParent(string _orgId) view returns(string)
func (_OrgManager *OrgManagerCallerSession) GetUltimateParent(_orgId string) (string, error) {
	return _OrgManager.Contract.GetUltimateParent(&_OrgManager.CallOpts, _orgId)
}

// AddOrg is a paid mutator transaction binding the contract method 0xf9953de5.
//
// Solidity: function addOrg(string _orgId) returns()
func (_OrgManager *OrgManagerTransactor) AddOrg(opts *bind.TransactOpts, _orgId string) (*types.Transaction, error) {
	return _OrgManager.contract.Transact(opts, "addOrg", _orgId)
}

// AddOrg is a paid mutator transaction binding the contract method 0xf9953de5.
//
// Solidity: function addOrg(string _orgId) returns()
func (_OrgManager *OrgManagerSession) AddOrg(_orgId string) (*types.Transaction, error) {
	return _OrgManager.Contract.AddOrg(&_OrgManager.TransactOpts, _orgId)
}

// AddOrg is a paid mutator transaction binding the contract method 0xf9953de5.
//
// Solidity: function addOrg(string _orgId) returns()
func (_OrgManager *OrgManagerTransactorSession) AddOrg(_orgId string) (*types.Transaction, error) {
	return _OrgManager.Contract.AddOrg(&_OrgManager.TransactOpts, _orgId)
}

// AddSubOrg is a paid mutator transaction binding the contract method 0x1f953480.
//
// Solidity: function addSubOrg(string _pOrgId, string _orgId) returns()
func (_OrgManager *OrgManagerTransactor) AddSubOrg(opts *bind.TransactOpts, _pOrgId string, _orgId string) (*types.Transaction, error) {
	return _OrgManager.contract.Transact(opts, "addSubOrg", _pOrgId, _orgId)
}

// AddSubOrg is a paid mutator transaction binding the contract method 0x1f953480.
//
// Solidity: function addSubOrg(string _pOrgId, string _orgId) returns()
func (_OrgManager *OrgManagerSession) AddSubOrg(_pOrgId string, _orgId string) (*types.Transaction, error) {
	return _OrgManager.Contract.AddSubOrg(&_OrgManager.TransactOpts, _pOrgId, _orgId)
}

// AddSubOrg is a paid mutator transaction binding the contract method 0x1f953480.
//
// Solidity: function addSubOrg(string _pOrgId, string _orgId) returns()
func (_OrgManager *OrgManagerTransactorSession) AddSubOrg(_pOrgId string, _orgId string) (*types.Transaction, error) {
	return _OrgManager.Contract.AddSubOrg(&_OrgManager.TransactOpts, _pOrgId, _orgId)
}

// ApproveOrg is a paid mutator transaction binding the contract method 0xe3028316.
//
// Solidity: function approveOrg(string _orgId) returns()
func (_OrgManager *OrgManagerTransactor) ApproveOrg(opts *bind.TransactOpts, _orgId string) (*types.Transaction, error) {
	return _OrgManager.contract.Transact(opts, "approveOrg", _orgId)
}

// ApproveOrg is a paid mutator transaction binding the contract method 0xe3028316.
//
// Solidity: function approveOrg(string _orgId) returns()
func (_OrgManager *OrgManagerSession) ApproveOrg(_orgId string) (*types.Transaction, error) {
	return _OrgManager.Contract.ApproveOrg(&_OrgManager.TransactOpts, _orgId)
}

// ApproveOrg is a paid mutator transaction binding the contract method 0xe3028316.
//
// Solidity: function approveOrg(string _orgId) returns()
func (_OrgManager *OrgManagerTransactorSession) ApproveOrg(_orgId string) (*types.Transaction, error) {
	return _OrgManager.Contract.ApproveOrg(&_OrgManager.TransactOpts, _orgId)
}

// ApproveOrgStatusUpdate is a paid mutator transaction binding the contract method 0x14f775f9.
//
// Solidity: function approveOrgStatusUpdate(string _orgId, uint256 _action) returns()
func (_OrgManager *OrgManagerTransactor) ApproveOrgStatusUpdate(opts *bind.TransactOpts, _orgId string, _action *big.Int) (*types.Transaction, error) {
	return _OrgManager.contract.Transact(opts, "approveOrgStatusUpdate", _orgId, _action)
}

// ApproveOrgStatusUpdate is a paid mutator transaction binding the contract method 0x14f775f9.
//
// Solidity: function approveOrgStatusUpdate(string _orgId, uint256 _action) returns()
func (_OrgManager *OrgManagerSession) ApproveOrgStatusUpdate(_orgId string, _action *big.Int) (*types.Transaction, error) {
	return _OrgManager.Contract.ApproveOrgStatusUpdate(&_OrgManager.TransactOpts, _orgId, _action)
}

// ApproveOrgStatusUpdate is a paid mutator transaction binding the contract method 0x14f775f9.
//
// Solidity: function approveOrgStatusUpdate(string _orgId, uint256 _action) returns()
func (_OrgManager *OrgManagerTransactorSession) ApproveOrgStatusUpdate(_orgId string, _action *big.Int) (*types.Transaction, error) {
	return _OrgManager.Contract.ApproveOrgStatusUpdate(&_OrgManager.TransactOpts, _orgId, _action)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _permUpgradable) returns()
func (_OrgManager *OrgManagerTransactor) Initialize(opts *bind.TransactOpts, _permUpgradable common.Address) (*types.Transaction, error) {
	return _OrgManager.contract.Transact(opts, "initialize", _permUpgradable)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _permUpgradable) returns()
func (_OrgManager *OrgManagerSession) Initialize(_permUpgradable common.Address) (*types.Transaction, error) {
	return _OrgManager.Contract.Initialize(&_OrgManager.TransactOpts, _permUpgradable)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _permUpgradable) returns()
func (_OrgManager *OrgManagerTransactorSession) Initialize(_permUpgradable common.Address) (*types.Transaction, error) {
	return _OrgManager.Contract.Initialize(&_OrgManager.TransactOpts, _permUpgradable)
}

// SetUpOrg is a paid mutator transaction binding the contract method 0x9e58eb9f.
//
// Solidity: function setUpOrg(string _orgId, uint256 _breadth, uint256 _depth) returns()
func (_OrgManager *OrgManagerTransactor) SetUpOrg(opts *bind.TransactOpts, _orgId string, _breadth *big.Int, _depth *big.Int) (*types.Transaction, error) {
	return _OrgManager.contract.Transact(opts, "setUpOrg", _orgId, _breadth, _depth)
}

// SetUpOrg is a paid mutator transaction binding the contract method 0x9e58eb9f.
//
// Solidity: function setUpOrg(string _orgId, uint256 _breadth, uint256 _depth) returns()
func (_OrgManager *OrgManagerSession) SetUpOrg(_orgId string, _breadth *big.Int, _depth *big.Int) (*types.Transaction, error) {
	return _OrgManager.Contract.SetUpOrg(&_OrgManager.TransactOpts, _orgId, _breadth, _depth)
}

// SetUpOrg is a paid mutator transaction binding the contract method 0x9e58eb9f.
//
// Solidity: function setUpOrg(string _orgId, uint256 _breadth, uint256 _depth) returns()
func (_OrgManager *OrgManagerTransactorSession) SetUpOrg(_orgId string, _breadth *big.Int, _depth *big.Int) (*types.Transaction, error) {
	return _OrgManager.Contract.SetUpOrg(&_OrgManager.TransactOpts, _orgId, _breadth, _depth)
}

// UpdateOrg is a paid mutator transaction binding the contract method 0x0cc27493.
//
// Solidity: function updateOrg(string _orgId, uint256 _action) returns(uint256)
func (_OrgManager *OrgManagerTransactor) UpdateOrg(opts *bind.TransactOpts, _orgId string, _action *big.Int) (*types.Transaction, error) {
	return _OrgManager.contract.Transact(opts, "updateOrg", _orgId, _action)
}

// UpdateOrg is a paid mutator transaction binding the contract method 0x0cc27493.
//
// Solidity: function updateOrg(string _orgId, uint256 _action) returns(uint256)
func (_OrgManager *OrgManagerSession) UpdateOrg(_orgId string, _action *big.Int) (*types.Transaction, error) {
	return _OrgManager.Contract.UpdateOrg(&_OrgManager.TransactOpts, _orgId, _action)
}

// UpdateOrg is a paid mutator transaction binding the contract method 0x0cc27493.
//
// Solidity: function updateOrg(string _orgId, uint256 _action) returns(uint256)
func (_OrgManager *OrgManagerTransactorSession) UpdateOrg(_orgId string, _action *big.Int) (*types.Transaction, error) {
	return _OrgManager.Contract.UpdateOrg(&_OrgManager.TransactOpts, _orgId, _action)
}

// OrgManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the OrgManager contract.
type OrgManagerInitializedIterator struct {
	Event *OrgManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrgManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrgManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrgManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrgManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrgManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrgManagerInitialized represents a Initialized event raised by the OrgManager contract.
type OrgManagerInitialized struct {
	Version uint64
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_OrgManager *OrgManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*OrgManagerInitializedIterator, error) {

	logs, sub, err := _OrgManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &OrgManagerInitializedIterator{contract: _OrgManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

var InitializedTopicHash = "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"

// WatchInitialized is a free log subscription operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_OrgManager *OrgManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *OrgManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _OrgManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrgManagerInitialized)
				if err := _OrgManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2.
//
// Solidity: event Initialized(uint64 version)
func (_OrgManager *OrgManagerFilterer) ParseInitialized(log types.Log) (*OrgManagerInitialized, error) {
	event := new(OrgManagerInitialized)
	if err := _OrgManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrgManagerOrgApprovedIterator is returned from FilterOrgApproved and is used to iterate over the raw logs and unpacked data for OrgApproved events raised by the OrgManager contract.
type OrgManagerOrgApprovedIterator struct {
	Event *OrgManagerOrgApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrgManagerOrgApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrgManagerOrgApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrgManagerOrgApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrgManagerOrgApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrgManagerOrgApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrgManagerOrgApproved represents a OrgApproved event raised by the OrgManager contract.
type OrgManagerOrgApproved struct {
	OrgId     string
	PorgId    string
	UltParent string
	Level     *big.Int
	Status    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterOrgApproved is a free log retrieval operation binding the contract event 0xd705723a50859c9cc1d3953e10b8b9478820e7a62927ad3215897ed87b20591c.
//
// Solidity: event OrgApproved(string _orgId, string _porgId, string _ultParent, uint256 _level, uint256 _status)
func (_OrgManager *OrgManagerFilterer) FilterOrgApproved(opts *bind.FilterOpts) (*OrgManagerOrgApprovedIterator, error) {

	logs, sub, err := _OrgManager.contract.FilterLogs(opts, "OrgApproved")
	if err != nil {
		return nil, err
	}
	return &OrgManagerOrgApprovedIterator{contract: _OrgManager.contract, event: "OrgApproved", logs: logs, sub: sub}, nil
}

var OrgApprovedTopicHash = "0xd705723a50859c9cc1d3953e10b8b9478820e7a62927ad3215897ed87b20591c"

// WatchOrgApproved is a free log subscription operation binding the contract event 0xd705723a50859c9cc1d3953e10b8b9478820e7a62927ad3215897ed87b20591c.
//
// Solidity: event OrgApproved(string _orgId, string _porgId, string _ultParent, uint256 _level, uint256 _status)
func (_OrgManager *OrgManagerFilterer) WatchOrgApproved(opts *bind.WatchOpts, sink chan<- *OrgManagerOrgApproved) (event.Subscription, error) {

	logs, sub, err := _OrgManager.contract.WatchLogs(opts, "OrgApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrgManagerOrgApproved)
				if err := _OrgManager.contract.UnpackLog(event, "OrgApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrgApproved is a log parse operation binding the contract event 0xd705723a50859c9cc1d3953e10b8b9478820e7a62927ad3215897ed87b20591c.
//
// Solidity: event OrgApproved(string _orgId, string _porgId, string _ultParent, uint256 _level, uint256 _status)
func (_OrgManager *OrgManagerFilterer) ParseOrgApproved(log types.Log) (*OrgManagerOrgApproved, error) {
	event := new(OrgManagerOrgApproved)
	if err := _OrgManager.contract.UnpackLog(event, "OrgApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrgManagerOrgPendingApprovalIterator is returned from FilterOrgPendingApproval and is used to iterate over the raw logs and unpacked data for OrgPendingApproval events raised by the OrgManager contract.
type OrgManagerOrgPendingApprovalIterator struct {
	Event *OrgManagerOrgPendingApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrgManagerOrgPendingApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrgManagerOrgPendingApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrgManagerOrgPendingApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrgManagerOrgPendingApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrgManagerOrgPendingApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrgManagerOrgPendingApproval represents a OrgPendingApproval event raised by the OrgManager contract.
type OrgManagerOrgPendingApproval struct {
	OrgId     string
	PorgId    string
	UltParent string
	Level     *big.Int
	Status    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterOrgPendingApproval is a free log retrieval operation binding the contract event 0x0e8b7be64e0c730234ba2cd252b227fb481d7a247ba806d1941144c535bf054b.
//
// Solidity: event OrgPendingApproval(string _orgId, string _porgId, string _ultParent, uint256 _level, uint256 _status)
func (_OrgManager *OrgManagerFilterer) FilterOrgPendingApproval(opts *bind.FilterOpts) (*OrgManagerOrgPendingApprovalIterator, error) {

	logs, sub, err := _OrgManager.contract.FilterLogs(opts, "OrgPendingApproval")
	if err != nil {
		return nil, err
	}
	return &OrgManagerOrgPendingApprovalIterator{contract: _OrgManager.contract, event: "OrgPendingApproval", logs: logs, sub: sub}, nil
}

var OrgPendingApprovalTopicHash = "0x0e8b7be64e0c730234ba2cd252b227fb481d7a247ba806d1941144c535bf054b"

// WatchOrgPendingApproval is a free log subscription operation binding the contract event 0x0e8b7be64e0c730234ba2cd252b227fb481d7a247ba806d1941144c535bf054b.
//
// Solidity: event OrgPendingApproval(string _orgId, string _porgId, string _ultParent, uint256 _level, uint256 _status)
func (_OrgManager *OrgManagerFilterer) WatchOrgPendingApproval(opts *bind.WatchOpts, sink chan<- *OrgManagerOrgPendingApproval) (event.Subscription, error) {

	logs, sub, err := _OrgManager.contract.WatchLogs(opts, "OrgPendingApproval")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrgManagerOrgPendingApproval)
				if err := _OrgManager.contract.UnpackLog(event, "OrgPendingApproval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrgPendingApproval is a log parse operation binding the contract event 0x0e8b7be64e0c730234ba2cd252b227fb481d7a247ba806d1941144c535bf054b.
//
// Solidity: event OrgPendingApproval(string _orgId, string _porgId, string _ultParent, uint256 _level, uint256 _status)
func (_OrgManager *OrgManagerFilterer) ParseOrgPendingApproval(log types.Log) (*OrgManagerOrgPendingApproval, error) {
	event := new(OrgManagerOrgPendingApproval)
	if err := _OrgManager.contract.UnpackLog(event, "OrgPendingApproval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrgManagerOrgSuspendedIterator is returned from FilterOrgSuspended and is used to iterate over the raw logs and unpacked data for OrgSuspended events raised by the OrgManager contract.
type OrgManagerOrgSuspendedIterator struct {
	Event *OrgManagerOrgSuspended // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrgManagerOrgSuspendedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrgManagerOrgSuspended)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrgManagerOrgSuspended)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrgManagerOrgSuspendedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrgManagerOrgSuspendedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrgManagerOrgSuspended represents a OrgSuspended event raised by the OrgManager contract.
type OrgManagerOrgSuspended struct {
	OrgId     string
	PorgId    string
	UltParent string
	Level     *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterOrgSuspended is a free log retrieval operation binding the contract event 0x73ccf8d6c8385bf5347269bd59712da33183c1a5e1702494bcdb87d0f4674d96.
//
// Solidity: event OrgSuspended(string _orgId, string _porgId, string _ultParent, uint256 _level)
func (_OrgManager *OrgManagerFilterer) FilterOrgSuspended(opts *bind.FilterOpts) (*OrgManagerOrgSuspendedIterator, error) {

	logs, sub, err := _OrgManager.contract.FilterLogs(opts, "OrgSuspended")
	if err != nil {
		return nil, err
	}
	return &OrgManagerOrgSuspendedIterator{contract: _OrgManager.contract, event: "OrgSuspended", logs: logs, sub: sub}, nil
}

var OrgSuspendedTopicHash = "0x73ccf8d6c8385bf5347269bd59712da33183c1a5e1702494bcdb87d0f4674d96"

// WatchOrgSuspended is a free log subscription operation binding the contract event 0x73ccf8d6c8385bf5347269bd59712da33183c1a5e1702494bcdb87d0f4674d96.
//
// Solidity: event OrgSuspended(string _orgId, string _porgId, string _ultParent, uint256 _level)
func (_OrgManager *OrgManagerFilterer) WatchOrgSuspended(opts *bind.WatchOpts, sink chan<- *OrgManagerOrgSuspended) (event.Subscription, error) {

	logs, sub, err := _OrgManager.contract.WatchLogs(opts, "OrgSuspended")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrgManagerOrgSuspended)
				if err := _OrgManager.contract.UnpackLog(event, "OrgSuspended", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrgSuspended is a log parse operation binding the contract event 0x73ccf8d6c8385bf5347269bd59712da33183c1a5e1702494bcdb87d0f4674d96.
//
// Solidity: event OrgSuspended(string _orgId, string _porgId, string _ultParent, uint256 _level)
func (_OrgManager *OrgManagerFilterer) ParseOrgSuspended(log types.Log) (*OrgManagerOrgSuspended, error) {
	event := new(OrgManagerOrgSuspended)
	if err := _OrgManager.contract.UnpackLog(event, "OrgSuspended", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OrgManagerOrgSuspensionRevokedIterator is returned from FilterOrgSuspensionRevoked and is used to iterate over the raw logs and unpacked data for OrgSuspensionRevoked events raised by the OrgManager contract.
type OrgManagerOrgSuspensionRevokedIterator struct {
	Event *OrgManagerOrgSuspensionRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OrgManagerOrgSuspensionRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OrgManagerOrgSuspensionRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OrgManagerOrgSuspensionRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OrgManagerOrgSuspensionRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OrgManagerOrgSuspensionRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OrgManagerOrgSuspensionRevoked represents a OrgSuspensionRevoked event raised by the OrgManager contract.
type OrgManagerOrgSuspensionRevoked struct {
	OrgId     string
	PorgId    string
	UltParent string
	Level     *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterOrgSuspensionRevoked is a free log retrieval operation binding the contract event 0x882f030c609566cd82918a97d457fd48f9cfcefd11282e2654cde3f94579c15f.
//
// Solidity: event OrgSuspensionRevoked(string _orgId, string _porgId, string _ultParent, uint256 _level)
func (_OrgManager *OrgManagerFilterer) FilterOrgSuspensionRevoked(opts *bind.FilterOpts) (*OrgManagerOrgSuspensionRevokedIterator, error) {

	logs, sub, err := _OrgManager.contract.FilterLogs(opts, "OrgSuspensionRevoked")
	if err != nil {
		return nil, err
	}
	return &OrgManagerOrgSuspensionRevokedIterator{contract: _OrgManager.contract, event: "OrgSuspensionRevoked", logs: logs, sub: sub}, nil
}

var OrgSuspensionRevokedTopicHash = "0x882f030c609566cd82918a97d457fd48f9cfcefd11282e2654cde3f94579c15f"

// WatchOrgSuspensionRevoked is a free log subscription operation binding the contract event 0x882f030c609566cd82918a97d457fd48f9cfcefd11282e2654cde3f94579c15f.
//
// Solidity: event OrgSuspensionRevoked(string _orgId, string _porgId, string _ultParent, uint256 _level)
func (_OrgManager *OrgManagerFilterer) WatchOrgSuspensionRevoked(opts *bind.WatchOpts, sink chan<- *OrgManagerOrgSuspensionRevoked) (event.Subscription, error) {

	logs, sub, err := _OrgManager.contract.WatchLogs(opts, "OrgSuspensionRevoked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OrgManagerOrgSuspensionRevoked)
				if err := _OrgManager.contract.UnpackLog(event, "OrgSuspensionRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOrgSuspensionRevoked is a log parse operation binding the contract event 0x882f030c609566cd82918a97d457fd48f9cfcefd11282e2654cde3f94579c15f.
//
// Solidity: event OrgSuspensionRevoked(string _orgId, string _porgId, string _ultParent, uint256 _level)
func (_OrgManager *OrgManagerFilterer) ParseOrgSuspensionRevoked(log types.Log) (*OrgManagerOrgSuspensionRevoked, error) {
	event := new(OrgManagerOrgSuspensionRevoked)
	if err := _OrgManager.contract.UnpackLog(event, "OrgSuspensionRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
