// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethereum/go-ethereum/plugin/account (interfaces: Service)

// Package mock_plugin is a generated GoMock package.
package mock_plugin

import (
	context "context"
	reflect "reflect"
	time "time"

	accounts "github.com/ethereum/go-ethereum/accounts"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Accounts mocks base method
func (m *MockService) Accounts(arg0 context.Context) []accounts.Account {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accounts", arg0)
	ret0, _ := ret[0].([]accounts.Account)
	return ret0
}

// Accounts indicates an expected call of Accounts
func (mr *MockServiceMockRecorder) Accounts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockService)(nil).Accounts), arg0)
}

// Close mocks base method
func (m *MockService) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockServiceMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockService)(nil).Close), arg0)
}

// Contains mocks base method
func (m *MockService) Contains(arg0 context.Context, arg1 accounts.Account) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains
func (mr *MockServiceMockRecorder) Contains(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockService)(nil).Contains), arg0, arg1)
}

// ImportRawKey mocks base method
func (m *MockService) ImportRawKey(arg0 context.Context, arg1 string, arg2 interface{}) (accounts.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportRawKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(accounts.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportRawKey indicates an expected call of ImportRawKey
func (mr *MockServiceMockRecorder) ImportRawKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRawKey", reflect.TypeOf((*MockService)(nil).ImportRawKey), arg0, arg1, arg2)
}

// Lock mocks base method
func (m *MockService) Lock(arg0 context.Context, arg1 accounts.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock
func (mr *MockServiceMockRecorder) Lock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockService)(nil).Lock), arg0, arg1)
}

// NewAccount mocks base method
func (m *MockService) NewAccount(arg0 context.Context, arg1 interface{}) (accounts.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAccount", arg0, arg1)
	ret0, _ := ret[0].(accounts.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAccount indicates an expected call of NewAccount
func (mr *MockServiceMockRecorder) NewAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccount", reflect.TypeOf((*MockService)(nil).NewAccount), arg0, arg1)
}

// Open mocks base method
func (m *MockService) Open(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockServiceMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockService)(nil).Open), arg0, arg1)
}

// Sign mocks base method
func (m *MockService) Sign(arg0 context.Context, arg1 accounts.Account, arg2 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign
func (mr *MockServiceMockRecorder) Sign(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockService)(nil).Sign), arg0, arg1, arg2)
}

// Status mocks base method
func (m *MockService) Status(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockServiceMockRecorder) Status(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockService)(nil).Status), arg0)
}

// TimedUnlock mocks base method
func (m *MockService) TimedUnlock(arg0 context.Context, arg1 accounts.Account, arg2 string, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimedUnlock", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// TimedUnlock indicates an expected call of TimedUnlock
func (mr *MockServiceMockRecorder) TimedUnlock(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimedUnlock", reflect.TypeOf((*MockService)(nil).TimedUnlock), arg0, arg1, arg2, arg3)
}

// UnlockAndSign mocks base method
func (m *MockService) UnlockAndSign(arg0 context.Context, arg1 accounts.Account, arg2 []byte, arg3 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockAndSign", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockAndSign indicates an expected call of UnlockAndSign
func (mr *MockServiceMockRecorder) UnlockAndSign(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockAndSign", reflect.TypeOf((*MockService)(nil).UnlockAndSign), arg0, arg1, arg2, arg3)
}
