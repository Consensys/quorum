// Code generated by MockGen. DO NOT EDIT.
// Source: proto/helloworld.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	proto "github.com/jpmorganchase/quorum-hello-world-plugin-sdk-go/proto"
	grpc "google.golang.org/grpc"
)

// MockPluginGreetingClient is a mock of PluginGreetingClient interface
type MockPluginGreetingClient struct {
	ctrl     *gomock.Controller
	recorder *MockPluginGreetingClientMockRecorder
}

// MockPluginGreetingClientMockRecorder is the mock recorder for MockPluginGreetingClient
type MockPluginGreetingClientMockRecorder struct {
	mock *MockPluginGreetingClient
}

// NewMockPluginGreetingClient creates a new mock instance
func NewMockPluginGreetingClient(ctrl *gomock.Controller) *MockPluginGreetingClient {
	mock := &MockPluginGreetingClient{ctrl: ctrl}
	mock.recorder = &MockPluginGreetingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginGreetingClient) EXPECT() *MockPluginGreetingClientMockRecorder {
	return m.recorder
}

// Greeting mocks base method
func (m *MockPluginGreetingClient) Greeting(ctx context.Context, in *proto.PluginHelloWorld_Request, opts ...grpc.CallOption) (*proto.PluginHelloWorld_Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Greeting", varargs...)
	ret0, _ := ret[0].(*proto.PluginHelloWorld_Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Greeting indicates an expected call of Greeting
func (mr *MockPluginGreetingClientMockRecorder) Greeting(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Greeting", reflect.TypeOf((*MockPluginGreetingClient)(nil).Greeting), varargs...)
}

// MockPluginGreetingServer is a mock of PluginGreetingServer interface
type MockPluginGreetingServer struct {
	ctrl     *gomock.Controller
	recorder *MockPluginGreetingServerMockRecorder
}

// MockPluginGreetingServerMockRecorder is the mock recorder for MockPluginGreetingServer
type MockPluginGreetingServerMockRecorder struct {
	mock *MockPluginGreetingServer
}

// NewMockPluginGreetingServer creates a new mock instance
func NewMockPluginGreetingServer(ctrl *gomock.Controller) *MockPluginGreetingServer {
	mock := &MockPluginGreetingServer{ctrl: ctrl}
	mock.recorder = &MockPluginGreetingServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPluginGreetingServer) EXPECT() *MockPluginGreetingServerMockRecorder {
	return m.recorder
}

// Greeting mocks base method
func (m *MockPluginGreetingServer) Greeting(arg0 context.Context, arg1 *proto.PluginHelloWorld_Request) (*proto.PluginHelloWorld_Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Greeting", arg0, arg1)
	ret0, _ := ret[0].(*proto.PluginHelloWorld_Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Greeting indicates an expected call of Greeting
func (mr *MockPluginGreetingServerMockRecorder) Greeting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Greeting", reflect.TypeOf((*MockPluginGreetingServer)(nil).Greeting), arg0, arg1)
}
