// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bind

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IAmendRequestAmendStage is an auto generated low-level Go binding around an user-defined struct.
type IAmendRequestAmendStage struct {
	Stage    *big.Int
	SubStage *big.Int
	Content  IStageContractContent
}

// IAmendRequestConfirmation is an auto generated low-level Go binding around an user-defined struct.
type IAmendRequestConfirmation struct {
	IssuingBank        [32]byte
	AdvisingBank       [32]byte
	ReimbursingBank    [32]byte
	IssuingBankSig     []byte
	AdvisingBankSig    []byte
	ReimbursingBankSig []byte
}

// IAmendRequestRequest is an auto generated low-level Go binding around an user-defined struct.
type IAmendRequestRequest struct {
	TypeOf          *big.Int
	Proposer        common.Address
	MigratingStages [][32]byte
	AmendStage      IAmendRequestAmendStage
	Confirmed       IAmendRequestConfirmation
	IsFulfilled     bool
}

// // IStageContractContent is an auto generated low-level Go binding around an user-defined struct.
// type IStageContractContent struct {
// 	RootHash       [32]byte
// 	SignedTime     *big.Int
// 	PrevHash       [32]byte
// 	NumOfDocuments *big.Int
// 	ContentHash    [][32]byte
// 	Url            string
// 	Acknowledge    []byte
// 	Signature      []byte
// }

// AmendRequestABI is the input ABI used to generate the binding from.
const AmendRequestABI = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_amc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ApprovedAmendment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"documentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"SubmittedAmendment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"amc\",\"outputs\":[{\"internalType\":\"contractIAMC\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_documentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_approver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_documentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"fulfilled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_documentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getAmendRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"typeOf\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"migratingStages\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subStage\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"signedTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"prevHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numOfDocuments\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"contentHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"acknowledge\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"structIStageContract.Content\",\"name\":\"content\",\"type\":\"tuple\"}],\"internalType\":\"structIAmendRequest.AmendStage\",\"name\":\"amendStage\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"issuingBank\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"advisingBank\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"reimbursingBank\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"issuingBankSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"advisingBankSig\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"reimbursingBankSig\",\"type\":\"bytes\"}],\"internalType\":\"structIAmendRequest.Confirmation\",\"name\":\"confirmed\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isFulfilled\",\"type\":\"bool\"}],\"internalType\":\"structIAmendRequest.Request\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_documentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_documentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"isFulfilled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_documentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"isProposer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_amc\",\"type\":\"address\"}],\"name\":\"setAMC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_documentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_proposer\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"_migratingStages\",\"type\":\"bytes32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"subStage\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"rootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"signedTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"prevHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"numOfDocuments\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"contentHash\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"acknowledge\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"structIStageContract.Content\",\"name\":\"content\",\"type\":\"tuple\"}],\"internalType\":\"structIAmendRequest.AmendStage\",\"name\":\"_amendStage\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"submit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

var AmendRequestParsedABI, _ = abi.JSON(strings.NewReader(AmendRequestABI))

// AmendRequestBin is the compiled bytecode used for deploying new contracts.
var AmendRequestBin = "0x60806040523480156200001157600080fd5b50604051620046a0380380620046a0833981810160405281019062000037919062000095565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b6000815190506200008f8162000100565b92915050565b600060208284031215620000ae57620000ad620000fb565b5b6000620000be848285016200007e565b91505092915050565b6000620000d482620000db565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200010b81620000c7565b81146200011757600080fd5b50565b614576806200012a6000396000f3fe608060405234801561001057600080fd5b506004361061009d5760003560e01c8063a6497af911610066578063a6497af91461016a578063a687be521461019a578063bf276511146101b6578063df879220146101e6578063f3737c04146102025761009d565b8062ebf111146100a2578063171cba35146100be5780637ecebe00146100da578063856b909b1461010a5780639f3fc6d31461013a575b600080fd5b6100bc60048036038101906100b79190613200565b610220565b005b6100d860048036038101906100d39190612ff4565b6103dd565b005b6100f460048036038101906100ef9190612ff4565b61057a565b6040516101019190613ddc565b60405180910390f35b610124600480360381019061011f9190613240565b610592565b6040516101319190613b9f565b60405180910390f35b610154600480360381019061014f9190613200565b610613565b6040516101619190613b9f565b60405180910390f35b610184600480360381019061017f9190613200565b6106c1565b6040516101919190613dba565b60405180910390f35b6101b460048036038101906101af9190613293565b610c2e565b005b6101d060048036038101906101cb9190613200565b6111de565b6040516101dd9190613b9f565b60405180910390f35b61020060048036038101906101fb9190613131565b6114ec565b005b61020a611db6565b6040516102179190613bff565b60405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561029d57600080fd5b505afa1580156102b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d59190613021565b73ffffffffffffffffffffffffffffffffffffffff161461032b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032290613c7a565b60405180910390fd5b81816000600160008481526020019081526020016000206000838152602001908152602001600020600001541415610398576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038f90613d9a565b60405180910390fd5b6001806000868152602001908152602001600020600085815260200190815260200160002060130160006101000a81548160ff02191690831515021790555050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe9fbb80336040518263ffffffff1660e01b81526004016104369190613b32565b60206040518083038186803b15801561044e57600080fd5b505afa158015610462573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048691906130d7565b6104c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bc90613c5a565b60405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610536576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052d90613c9a565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60026020528060005260406000206000915090505481565b60008173ffffffffffffffffffffffffffffffffffffffff1660016000868152602001908152602001600020600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161490509392505050565b600082826000600160008481526020019081526020016000206000838152602001908152602001600020600001541415610682576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613d9a565b60405180910390fd5b60016000868152602001908152602001600020600085815260200190815260200160002060130160009054906101000a900460ff169250505092915050565b6106c9612811565b6001600084815260200190815260200160002060008381526020019081526020016000206040518060c0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054806020026020016040519081016040528092919081815260200182805480156107a757602002820191906000526020600020905b815481526020019060010190808311610793575b505050505081526020016003820160405180606001604052908160008201548152602001600182015481526020016002820160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820180548060200260200160405190810160405280929190818152602001828054801561085c57602002820191906000526020600020905b815481526020019060010190808311610848575b5050505050815260200160058201805461087590614068565b80601f01602080910402602001604051908101604052809291908181526020018280546108a190614068565b80156108ee5780601f106108c3576101008083540402835291602001916108ee565b820191906000526020600020905b8154815290600101906020018083116108d157829003601f168201915b5050505050815260200160068201805461090790614068565b80601f016020809104026020016040519081016040528092919081815260200182805461093390614068565b80156109805780601f1061095557610100808354040283529160200191610980565b820191906000526020600020905b81548152906001019060200180831161096357829003601f168201915b5050505050815260200160078201805461099990614068565b80601f01602080910402602001604051908101604052809291908181526020018280546109c590614068565b8015610a125780601f106109e757610100808354040283529160200191610a12565b820191906000526020600020905b8154815290600101906020018083116109f557829003601f168201915b505050505081525050815250508152602001600d82016040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382018054610a6190614068565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8d90614068565b8015610ada5780601f10610aaf57610100808354040283529160200191610ada565b820191906000526020600020905b815481529060010190602001808311610abd57829003601f168201915b50505050508152602001600482018054610af390614068565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1f90614068565b8015610b6c5780601f10610b4157610100808354040283529160200191610b6c565b820191906000526020600020905b815481529060010190602001808311610b4f57829003601f168201915b50505050508152602001600582018054610b8590614068565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb190614068565b8015610bfe5780601f10610bd357610100808354040283529160200191610bfe565b820191906000526020600020905b815481529060010190602001808311610be157829003601f168201915b50505050508152505081526020016013820160009054906101000a900460ff161515151581525050905092915050565b84846000600160008481526020019081526020016000206000838152602001908152602001600020600001541415610c9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9290613d9a565b60405180910390fd5b60003390508573ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610da2575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3b57600080fd5b505afa158015610d4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d739190613021565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610de1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd890613d3a565b60405180910390fd5b6000610df08989898989611dda565b90506000801916811415610e39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3090613d5a565b60405180910390fd5b61118e87600160008c815260200190815260200160002060008b8152602001908152602001600020600201805480602002602001604051908101604052809291908181526020018280548015610eae57602002820191906000526020600020905b815481526020019060010190808311610e9a575b5050505050600160008d815260200190815260200160002060008c8152602001908152602001600020600301604051806060016040529081600082015481526020016001820154815260200160028201604051806101000160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020018280548015610f8157602002820191906000526020600020905b815481526020019060010190808311610f6d575b50505050508152602001600582018054610f9a90614068565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc690614068565b80156110135780601f10610fe857610100808354040283529160200191611013565b820191906000526020600020905b815481529060010190602001808311610ff657829003601f168201915b5050505050815260200160068201805461102c90614068565b80601f016020809104026020016040519081016040528092919081815260200182805461105890614068565b80156110a55780601f1061107a576101008083540402835291602001916110a5565b820191906000526020600020905b81548152906001019060200180831161108857829003601f168201915b505050505081526020016007820180546110be90614068565b80601f01602080910402602001604051908101604052809291908181526020018280546110ea90614068565b80156111375780601f1061110c57610100808354040283529160200191611137565b820191906000526020600020905b81548152906001019060200180831161111a57829003601f168201915b5050505050815250508152505089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061213f565b8673ffffffffffffffffffffffffffffffffffffffff16888a7fe8bf39464f4f533619fa362b4e80c90fba7d4527115ffe466472fdc52f97710960405160405180910390a4505050505050505050565b60008282600060016000848152602001908152602001600020600083815260200190815260200160002060000154141561124d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124490613d9a565b60405180910390fd5b60006001600087815260200190815260200160002060008681526020019081526020016000206000015490506000600160008881526020019081526020016000206000878152602001908152602001600020600d016040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820180546112db90614068565b80601f016020809104026020016040519081016040528092919081815260200182805461130790614068565b80156113545780601f1061132957610100808354040283529160200191611354565b820191906000526020600020905b81548152906001019060200180831161133757829003601f168201915b5050505050815260200160048201805461136d90614068565b80601f016020809104026020016040519081016040528092919081815260200182805461139990614068565b80156113e65780601f106113bb576101008083540402835291602001916113e6565b820191906000526020600020905b8154815290600101906020018083116113c957829003601f168201915b505050505081526020016005820180546113ff90614068565b80601f016020809104026020016040519081016040528092919081815260200182805461142b90614068565b80156114785780601f1061144d57610100808354040283529160200191611478565b820191906000526020600020905b81548152906001019060200180831161145b57829003601f168201915b505050505081525050905060018214156114b1576000816060015151141580156114a85750600081608001515114155b945050506114e4565b6000816060015151141580156114cd5750600081608001515114155b80156114df575060008160a001515114155b945050505b505092915050565b600033905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f887ea406040518163ffffffff1660e01b815260040160206040518083038186803b15801561155a57600080fd5b505afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190613021565b90508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806115f957508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b611638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162f90613d3a565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1663b93f9b0a8a6040518263ffffffff1660e01b81526004016116749190613ddc565b604080518083038186803b15801561168b57600080fd5b505afa15801561169f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c3919061304e565b91509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172e90613d7a565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16637902f1768a89600001516040518363ffffffff1660e01b8152600401611778929190613b76565b60206040518083038186803b15801561179057600080fd5b505afa1580156117a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c89190613104565b90506000801916811415611811576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180890613cfa565b60405180910390fd5b61181f89886040015161226b565b61182b8989898961213f565b60008373ffffffffffffffffffffffffffffffffffffffff1663f65ebf3f6040518163ffffffff1660e01b815260040160006040518083038186803b15801561187357600080fd5b505afa158015611887573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118b0919061308e565b90506000600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008b8260405160200161190b9291906139c1565b6040516020818303038152906040528051906020012060001c90506001826119339190613f4d565b600260008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555084600160008f81526020019081526020016000206000838152602001908152602001600020600001819055508b600160008f8152602001908152602001600020600083815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508a600160008f815260200190815260200160002060008381526020019081526020016000206002019080519060200190611a4392919061286b565b5089600160008f815260200190815260200160002060008381526020019081526020016000206003016000820151816000015560208201518160010155604082015181600201600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004019080519060200190611acd92919061286b565b5060a0820151816005019080519060200190611aea9291906128b8565b5060c0820151816006019080519060200190611b0792919061293e565b5060e0820151816007019080519060200190611b2492919061293e565b50505090505082600081518110611b3e57611b3d614190565b5b6020026020010151600160008f81526020019081526020016000206000838152602001908152602001600020600d016000018190555082600181518110611b8857611b87614190565b5b6020026020010151600160008f81526020019081526020016000206000838152602001908152602001600020600d0160010181905550600583511415611c175782600281518110611bdc57611bdb614190565b5b6020026020010151600160008f81526020019081526020016000206000838152602001908152602001600020600d0160020181905550611c48565b6000600160008f81526020019081526020016000206000838152602001908152602001600020600d01600201819055505b82600081518110611c5c57611c5b614190565b5b6020026020010151841415611caf5788600160008f81526020019081526020016000206000838152602001908152602001600020600d016003019080519060200190611ca992919061293e565b50611d57565b82600181518110611cc357611cc2614190565b5b6020026020010151841415611d165788600160008f81526020019081526020016000206000838152602001908152602001600020600d016004019080519060200190611d1092919061293e565b50611d56565b88600160008f81526020019081526020016000206000838152602001908152602001600020600d016005019080519060200190611d5492919061293e565b505b5b818d8d73ffffffffffffffffffffffffffffffffffffffff167f5613f7bdb7de0b9e304bd3206cfe56e5fbe6132fb78f885650b90e5ae660881084604051611d9f9190613ddc565b60405180910390a450505050505050505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600160008881526020019081526020016000206000878152602001908152602001600020600d016040518060c0016040529081600082015481526020016001820154815260200160028201548152602001600382018054611e3d90614068565b80601f0160208091040260200160405190810160405280929190818152602001828054611e6990614068565b8015611eb65780601f10611e8b57610100808354040283529160200191611eb6565b820191906000526020600020905b815481529060010190602001808311611e9957829003601f168201915b50505050508152602001600482018054611ecf90614068565b80601f0160208091040260200160405190810160405280929190818152602001828054611efb90614068565b8015611f485780601f10611f1d57610100808354040283529160200191611f48565b820191906000526020600020905b815481529060010190602001808311611f2b57829003601f168201915b50505050508152602001600582018054611f6190614068565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8d90614068565b8015611fda5780601f10611faf57610100808354040283529160200191611fda565b820191906000526020600020905b815481529060010190602001808311611fbd57829003601f168201915b5050505050815250509050611ff3858260000151612340565b801561200457506000816060015151145b1561204f578383600160008a81526020019081526020016000206000898152602001908152602001600020600d0160030191906120429291906129c4565b5080600001519150612135565b61205d858260200151612340565b801561206e57506000816080015151145b156120b9578383600160008a81526020019081526020016000206000898152602001908152602001600020600d0160040191906120ac9291906129c4565b5080602001519150612134565b60008019168160400151141580156120db57506120da858260400151612340565b5b80156120ec575060008160a0015151145b15612133578383600160008a81526020019081526020016000206000898152602001908152602001600020600d01600501919061212a9291906129c4565b50806040015191505b5b5b5095945050505050565b600082600001518360200151846040015160000151856040015160400151866040015160800151876040015160a00151886040015160200151896040015160c001518a6040015160e001516040516020016121a299989796959493929190613a9f565b6040516020818303038152906040528051906020012090506121eb84826040516020016121d09291906139ed565b604051602081830303815290604052805190602001206123f6565b90506121f78183612426565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614612264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225b90613cba565b60405180910390fd5b5050505050565b60006122be8260000151836040015184608001518560a0015186602001518760c001516040516020016122a396959493929190613a15565b604051602081830303815290604052805190602001206123f6565b90506122ce818360e00151612426565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461233b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233290613cba565b60405180910390fd5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635581f37284846040518363ffffffff1660e01b815260040161239e929190613b4d565b60206040518083038186803b1580156123b657600080fd5b505afa1580156123ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ee91906130d7565b905092915050565b6000816040516020016124099190613a79565b604051602081830303815290604052805190602001209050919050565b6000806000612435858561244d565b91509150612442816124d0565b819250505092915050565b60008060418351141561248f5760008060006020860151925060408601519150606086015160001a9050612483878285856126a5565b945094505050506124c9565b6040835114156124c05760008060208501519150604085015190506124b58683836127b2565b9350935050506124c9565b60006002915091505b9250929050565b600060048111156124e4576124e3614132565b5b8160048111156124f7576124f6614132565b5b1415612502576126a2565b6001600481111561251657612515614132565b5b81600481111561252957612528614132565b5b141561256a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256190613c1a565b60405180910390fd5b6002600481111561257e5761257d614132565b5b81600481111561259157612590614132565b5b14156125d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c990613c3a565b60405180910390fd5b600360048111156125e6576125e5614132565b5b8160048111156125f9576125f8614132565b5b141561263a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263190613cda565b60405180910390fd5b60048081111561264d5761264c614132565b5b8160048111156126605761265f614132565b5b14156126a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269890613d1a565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156126e05760006003915091506127a9565b601b8560ff16141580156126f85750601c8560ff1614155b1561270a5760006004915091506127a9565b60006001878787876040516000815260200160405260405161272f9493929190613bba565b6020604051602081039080840390855afa158015612751573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156127a0576000600192509250506127a9565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6127f59190613f4d565b9050612803878288856126a5565b935093505050935093915050565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200161284f612a4a565b815260200161285c612a71565b81526020016000151581525090565b8280548282559060005260206000209081019282156128a7579160200282015b828111156128a657825182559160200191906001019061288b565b5b5090506128b49190612ab0565b5090565b8280546128c490614068565b90600052602060002090601f0160209004810192826128e6576000855561292d565b82601f106128ff57805160ff191683800117855561292d565b8280016001018555821561292d579182015b8281111561292c578251825591602001919060010190612911565b5b50905061293a9190612acd565b5090565b82805461294a90614068565b90600052602060002090601f01602090048101928261296c57600085556129b3565b82601f1061298557805160ff19168380011785556129b3565b828001600101855582156129b3579182015b828111156129b2578251825591602001919060010190612997565b5b5090506129c09190612acd565b5090565b8280546129d090614068565b90600052602060002090601f0160209004810192826129f25760008555612a39565b82601f10612a0b57803560ff1916838001178555612a39565b82800160010185558215612a39579182015b82811115612a38578235825591602001919060010190612a1d565b5b509050612a469190612acd565b5090565b60405180606001604052806000815260200160008152602001612a6b612aea565b81525090565b6040518060c001604052806000801916815260200160008019168152602001600080191681526020016060815260200160608152602001606081525090565b5b80821115612ac9576000816000905550600101612ab1565b5090565b5b80821115612ae6576000816000905550600101612ace565b5090565b60405180610100016040528060008019168152602001600081526020016000801916815260200160008152602001606081526020016060815260200160608152602001606081525090565b6000612b48612b4384613e1c565b613df7565b90508083825260208201905082856020860282011115612b6b57612b6a614202565b5b60005b85811015612b9b5781612b818882612d34565b845260208401935060208301925050600181019050612b6e565b5050509392505050565b6000612bb8612bb384613e1c565b613df7565b90508083825260208201905082856020860282011115612bdb57612bda614202565b5b60005b85811015612c0b5781612bf18882612d49565b845260208401935060208301925050600181019050612bde565b5050509392505050565b6000612c28612c2384613e48565b613df7565b905082815260208101848484011115612c4457612c43614207565b5b612c4f848285614026565b509392505050565b6000612c6a612c6584613e79565b613df7565b905082815260208101848484011115612c8657612c85614207565b5b612c91848285614026565b509392505050565b600081359050612ca8816144e4565b92915050565b600081519050612cbd816144e4565b92915050565b600082601f830112612cd857612cd76141f3565b5b8135612ce8848260208601612b35565b91505092915050565b600082601f830112612d0657612d056141f3565b5b8151612d16848260208601612ba5565b91505092915050565b600081519050612d2e816144fb565b92915050565b600081359050612d4381614512565b92915050565b600081519050612d5881614512565b92915050565b60008083601f840112612d7457612d736141f3565b5b8235905067ffffffffffffffff811115612d9157612d906141ee565b5b602083019150836001820283011115612dad57612dac614202565b5b9250929050565b600082601f830112612dc957612dc86141f3565b5b8135612dd9848260208601612c15565b91505092915050565b600082601f830112612df757612df66141f3565b5b8135612e07848260208601612c57565b91505092915050565b600060608284031215612e2657612e256141f8565b5b612e306060613df7565b90506000612e4084828501612fca565b6000830152506020612e5484828501612fca565b602083015250604082013567ffffffffffffffff811115612e7857612e776141fd565b5b612e8484828501612e90565b60408301525092915050565b60006101008284031215612ea757612ea66141f8565b5b612eb2610100613df7565b90506000612ec284828501612d34565b6000830152506020612ed684828501612fca565b6020830152506040612eea84828501612d34565b6040830152506060612efe84828501612fca565b606083015250608082013567ffffffffffffffff811115612f2257612f216141fd565b5b612f2e84828501612cc3565b60808301525060a082013567ffffffffffffffff811115612f5257612f516141fd565b5b612f5e84828501612de2565b60a08301525060c082013567ffffffffffffffff811115612f8257612f816141fd565b5b612f8e84828501612db4565b60c08301525060e082013567ffffffffffffffff811115612fb257612fb16141fd565b5b612fbe84828501612db4565b60e08301525092915050565b600081359050612fd981614529565b92915050565b600081519050612fee81614529565b92915050565b60006020828403121561300a57613009614211565b5b600061301884828501612c99565b91505092915050565b60006020828403121561303757613036614211565b5b600061304584828501612cae565b91505092915050565b6000806040838503121561306557613064614211565b5b600061307385828601612cae565b925050602061308485828601612fdf565b9150509250929050565b6000602082840312156130a4576130a3614211565b5b600082015167ffffffffffffffff8111156130c2576130c161420c565b5b6130ce84828501612cf1565b91505092915050565b6000602082840312156130ed576130ec614211565b5b60006130fb84828501612d1f565b91505092915050565b60006020828403121561311a57613119614211565b5b600061312884828501612d49565b91505092915050565b600080600080600060a0868803121561314d5761314c614211565b5b600061315b88828901612fca565b955050602061316c88828901612c99565b945050604086013567ffffffffffffffff81111561318d5761318c61420c565b5b61319988828901612cc3565b935050606086013567ffffffffffffffff8111156131ba576131b961420c565b5b6131c688828901612e10565b925050608086013567ffffffffffffffff8111156131e7576131e661420c565b5b6131f388828901612db4565b9150509295509295909350565b6000806040838503121561321757613216614211565b5b600061322585828601612fca565b925050602061323685828601612fca565b9150509250929050565b60008060006060848603121561325957613258614211565b5b600061326786828701612fca565b935050602061327886828701612fca565b925050604061328986828701612c99565b9150509250925092565b6000806000806000608086880312156132af576132ae614211565b5b60006132bd88828901612fca565b95505060206132ce88828901612fca565b94505060406132df88828901612c99565b935050606086013567ffffffffffffffff811115613300576132ff61420c565b5b61330c88828901612d5e565b92509250509295509295909350565b6000613327838361345a565b60208301905092915050565b600061333f8383613478565b60208301905092915050565b61335481613fa3565b82525050565b61336381613fa3565b82525050565b61337a61337582613fa3565b6140cb565b82525050565b600061338b82613eba565b6133958185613ee8565b93506133a083613eaa565b8060005b838110156133d15781516133b8888261331b565b97506133c383613edb565b9250506001810190506133a4565b5085935050505092915050565b60006133e982613eba565b6133f38185613ef9565b93506133fe83613eaa565b8060005b8381101561342f5781516134168882613333565b975061342183613edb565b925050600181019050613402565b5085935050505092915050565b61344581613fb5565b82525050565b61345481613fb5565b82525050565b61346381613fc1565b82525050565b61347281613fc1565b82525050565b61348181613fc1565b82525050565b61349861349382613fc1565b6140dd565b82525050565b60006134a982613ec5565b6134b38185613f04565b93506134c3818560208601614035565b6134cc81614216565b840191505092915050565b60006134e282613ec5565b6134ec8185613f15565b93506134fc818560208601614035565b80840191505092915050565b61351181614002565b82525050565b600061352282613ed0565b61352c8185613f20565b935061353c818560208601614035565b61354581614216565b840191505092915050565b600061355d601883613f31565b915061356882614234565b602082019050919050565b6000613580601f83613f31565b915061358b8261425d565b602082019050919050565b60006135a3601c83613f42565b91506135ae82614286565b601c82019050919050565b60006135c6600c83613f31565b91506135d1826142af565b602082019050919050565b60006135e9600b83613f31565b91506135f4826142d8565b602082019050919050565b600061360c601083613f31565b915061361782614301565b602082019050919050565b600061362f601183613f31565b915061363a8261432a565b602082019050919050565b6000613652602283613f31565b915061365d82614353565b604082019050919050565b6000613675601083613f31565b9150613680826143a2565b602082019050919050565b6000613698602283613f31565b91506136a3826143cb565b604082019050919050565b60006136bb601083613f31565b91506136c68261441a565b602082019050919050565b60006136de601083613f31565b91506136e982614443565b602082019050919050565b6000613701601483613f31565b915061370c8261446c565b602082019050919050565b6000613724602183613f31565b915061372f82614495565b604082019050919050565b6000606083016000830151613752600086018261397d565b506020830151613765602086018261397d565b506040830151848203604086015261377d8282613821565b9150508091505092915050565b600060c0830160008301516137a2600086018261345a565b5060208301516137b5602086018261345a565b5060408301516137c8604086018261345a565b50606083015184820360608601526137e0828261349e565b915050608083015184820360808601526137fa828261349e565b91505060a083015184820360a0860152613814828261349e565b9150508091505092915050565b60006101008301600083015161383a600086018261345a565b50602083015161384d602086018261397d565b506040830151613860604086018261345a565b506060830151613873606086018261397d565b506080830151848203608086015261388b8282613380565b91505060a083015184820360a08601526138a58282613517565b91505060c083015184820360c08601526138bf828261349e565b91505060e083015184820360e08601526138d9828261349e565b9150508091505092915050565b600060c0830160008301516138fe600086018261397d565b506020830151613911602086018261334b565b50604083015184820360408601526139298282613380565b91505060608301518482036060860152613943828261373a565b9150506080830151848203608086015261395d828261378a565b91505060a083015161397260a086018261343c565b508091505092915050565b61398681613feb565b82525050565b61399581613feb565b82525050565b6139ac6139a782613feb565b6140f9565b82525050565b6139bb81613ff5565b82525050565b60006139cd8285613369565b6014820191506139dd828461399b565b6020820191508190509392505050565b60006139f982856133de565b9150613a058284613487565b6020820191508190509392505050565b6000613a218289613487565b602082019150613a318288613487565b602082019150613a4182876133de565b9150613a4d82866134d7565b9150613a59828561399b565b602082019150613a6982846134d7565b9150819050979650505050505050565b6000613a8482613596565b9150613a908284613487565b60208201915081905092915050565b6000613aab828c61399b565b602082019150613abb828b61399b565b602082019150613acb828a613487565b602082019150613adb8289613487565b602082019150613aeb82886133de565b9150613af782876134d7565b9150613b03828661399b565b602082019150613b1382856134d7565b9150613b1f82846134d7565b91508190509a9950505050505050505050565b6000602082019050613b47600083018461335a565b92915050565b6000604082019050613b62600083018561335a565b613b6f6020830184613469565b9392505050565b6000604082019050613b8b600083018561335a565b613b98602083018461398c565b9392505050565b6000602082019050613bb4600083018461344b565b92915050565b6000608082019050613bcf6000830187613469565b613bdc60208301866139b2565b613be96040830185613469565b613bf66060830184613469565b95945050505050565b6000602082019050613c146000830184613508565b92915050565b60006020820190508181036000830152613c3381613550565b9050919050565b60006020820190508181036000830152613c5381613573565b9050919050565b60006020820190508181036000830152613c73816135b9565b9050919050565b60006020820190508181036000830152613c93816135dc565b9050919050565b60006020820190508181036000830152613cb3816135ff565b9050919050565b60006020820190508181036000830152613cd381613622565b9050919050565b60006020820190508181036000830152613cf381613645565b9050919050565b60006020820190508181036000830152613d1381613668565b9050919050565b60006020820190508181036000830152613d338161368b565b9050919050565b60006020820190508181036000830152613d53816136ae565b9050919050565b60006020820190508181036000830152613d73816136d1565b9050919050565b60006020820190508181036000830152613d93816136f4565b9050919050565b60006020820190508181036000830152613db381613717565b9050919050565b60006020820190508181036000830152613dd481846138e6565b905092915050565b6000602082019050613df1600083018461398c565b92915050565b6000613e01613e12565b9050613e0d828261409a565b919050565b6000604051905090565b600067ffffffffffffffff821115613e3757613e366141bf565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613e6357613e626141bf565b5b613e6c82614216565b9050602081019050919050565b600067ffffffffffffffff821115613e9457613e936141bf565b5b613e9d82614216565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613f5882613feb565b9150613f6383613feb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613f9857613f97614103565b5b828201905092915050565b6000613fae82613fcb565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061400d82614014565b9050919050565b600061401f82613fcb565b9050919050565b82818337600083830152505050565b60005b83811015614053578082015181840152602081019050614038565b83811115614062576000848401525b50505050565b6000600282049050600182168061408057607f821691505b6020821081141561409457614093614161565b5b50919050565b6140a382614216565b810181811067ffffffffffffffff821117156140c2576140c16141bf565b5b80604052505050565b60006140d6826140e7565b9050919050565b6000819050919050565b60006140f282614227565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b7f4f6e6c7920526f75746572000000000000000000000000000000000000000000600082015250565b7f536574207a65726f206164647265737300000000000000000000000000000000600082015250565b7f496e76616c6964207369676e6174757265000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c69642070726f706f73657200000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c6964206f70657261746f7200000000000000000000000000000000600082015250565b7f496e76616c696420617070726f76657200000000000000000000000000000000600082015250565b7f446f63756d656e744964206e6f7420666f756e64000000000000000000000000600082015250565b7f446f63756d656e744964206f7220526571756573744964206e6f7420666f756e60008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6144ed81613fa3565b81146144f857600080fd5b50565b61450481613fb5565b811461450f57600080fd5b50565b61451b81613fc1565b811461452657600080fd5b50565b61453281613feb565b811461453d57600080fd5b5056fea26469706673582212205e1395f6f7d26b0e1b2e5c3e333cbc9c06811cc92642140f0e3f33a233f345bd64736f6c63430008060033"

// DeployAmendRequest deploys a new Ethereum contract, binding an instance of AmendRequest to it.
func DeployAmendRequest(auth *bind.TransactOpts, backend bind.ContractBackend, _amc common.Address) (common.Address, *types.Transaction, *AmendRequest, error) {
	parsed, err := abi.JSON(strings.NewReader(AmendRequestABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AmendRequestBin), backend, _amc)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AmendRequest{AmendRequestCaller: AmendRequestCaller{contract: contract}, AmendRequestTransactor: AmendRequestTransactor{contract: contract}, AmendRequestFilterer: AmendRequestFilterer{contract: contract}}, nil
}

// AmendRequest is an auto generated Go binding around an Ethereum contract.
type AmendRequest struct {
	AmendRequestCaller     // Read-only binding to the contract
	AmendRequestTransactor // Write-only binding to the contract
	AmendRequestFilterer   // Log filterer for contract events
}

// AmendRequestCaller is an auto generated read-only Go binding around an Ethereum contract.
type AmendRequestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AmendRequestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AmendRequestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AmendRequestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AmendRequestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AmendRequestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AmendRequestSession struct {
	Contract     *AmendRequest     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AmendRequestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AmendRequestCallerSession struct {
	Contract *AmendRequestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// AmendRequestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AmendRequestTransactorSession struct {
	Contract     *AmendRequestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// AmendRequestRaw is an auto generated low-level Go binding around an Ethereum contract.
type AmendRequestRaw struct {
	Contract *AmendRequest // Generic contract binding to access the raw methods on
}

// AmendRequestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AmendRequestCallerRaw struct {
	Contract *AmendRequestCaller // Generic read-only contract binding to access the raw methods on
}

// AmendRequestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AmendRequestTransactorRaw struct {
	Contract *AmendRequestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAmendRequest creates a new instance of AmendRequest, bound to a specific deployed contract.
func NewAmendRequest(address common.Address, backend bind.ContractBackend) (*AmendRequest, error) {
	contract, err := bindAmendRequest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AmendRequest{AmendRequestCaller: AmendRequestCaller{contract: contract}, AmendRequestTransactor: AmendRequestTransactor{contract: contract}, AmendRequestFilterer: AmendRequestFilterer{contract: contract}}, nil
}

// NewAmendRequestCaller creates a new read-only instance of AmendRequest, bound to a specific deployed contract.
func NewAmendRequestCaller(address common.Address, caller bind.ContractCaller) (*AmendRequestCaller, error) {
	contract, err := bindAmendRequest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AmendRequestCaller{contract: contract}, nil
}

// NewAmendRequestTransactor creates a new write-only instance of AmendRequest, bound to a specific deployed contract.
func NewAmendRequestTransactor(address common.Address, transactor bind.ContractTransactor) (*AmendRequestTransactor, error) {
	contract, err := bindAmendRequest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AmendRequestTransactor{contract: contract}, nil
}

// NewAmendRequestFilterer creates a new log filterer instance of AmendRequest, bound to a specific deployed contract.
func NewAmendRequestFilterer(address common.Address, filterer bind.ContractFilterer) (*AmendRequestFilterer, error) {
	contract, err := bindAmendRequest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AmendRequestFilterer{contract: contract}, nil
}

// bindAmendRequest binds a generic wrapper to an already deployed contract.
func bindAmendRequest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AmendRequestABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AmendRequest *AmendRequestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AmendRequest.Contract.AmendRequestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AmendRequest *AmendRequestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AmendRequest.Contract.AmendRequestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AmendRequest *AmendRequestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AmendRequest.Contract.AmendRequestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AmendRequest *AmendRequestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AmendRequest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AmendRequest *AmendRequestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AmendRequest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AmendRequest *AmendRequestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AmendRequest.Contract.contract.Transact(opts, method, params...)
}

// Amc is a free data retrieval call binding the contract method 0xf3737c04.
//
// Solidity: function amc() view returns(address)
func (_AmendRequest *AmendRequestCaller) Amc(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AmendRequest.contract.Call(opts, &out, "amc")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Amc is a free data retrieval call binding the contract method 0xf3737c04.
//
// Solidity: function amc() view returns(address)
func (_AmendRequest *AmendRequestSession) Amc() (common.Address, error) {
	return _AmendRequest.Contract.Amc(&_AmendRequest.CallOpts)
}

// Amc is a free data retrieval call binding the contract method 0xf3737c04.
//
// Solidity: function amc() view returns(address)
func (_AmendRequest *AmendRequestCallerSession) Amc() (common.Address, error) {
	return _AmendRequest.Contract.Amc(&_AmendRequest.CallOpts)
}

// GetAmendRequest is a free data retrieval call binding the contract method 0xa6497af9.
//
// Solidity: function getAmendRequest(uint256 _documentId, uint256 _requestId) view returns((uint256,address,bytes32[],(uint256,uint256,(bytes32,uint256,bytes32,uint256,bytes32[],string,bytes,bytes)),(bytes32,bytes32,bytes32,bytes,bytes,bytes),bool))
func (_AmendRequest *AmendRequestCaller) GetAmendRequest(opts *bind.CallOpts, _documentId *big.Int, _requestId *big.Int) (IAmendRequestRequest, error) {
	var out []interface{}
	err := _AmendRequest.contract.Call(opts, &out, "getAmendRequest", _documentId, _requestId)

	if err != nil {
		return *new(IAmendRequestRequest), err
	}

	out0 := *abi.ConvertType(out[0], new(IAmendRequestRequest)).(*IAmendRequestRequest)

	return out0, err

}

// GetAmendRequest is a free data retrieval call binding the contract method 0xa6497af9.
//
// Solidity: function getAmendRequest(uint256 _documentId, uint256 _requestId) view returns((uint256,address,bytes32[],(uint256,uint256,(bytes32,uint256,bytes32,uint256,bytes32[],string,bytes,bytes)),(bytes32,bytes32,bytes32,bytes,bytes,bytes),bool))
func (_AmendRequest *AmendRequestSession) GetAmendRequest(_documentId *big.Int, _requestId *big.Int) (IAmendRequestRequest, error) {
	return _AmendRequest.Contract.GetAmendRequest(&_AmendRequest.CallOpts, _documentId, _requestId)
}

// GetAmendRequest is a free data retrieval call binding the contract method 0xa6497af9.
//
// Solidity: function getAmendRequest(uint256 _documentId, uint256 _requestId) view returns((uint256,address,bytes32[],(uint256,uint256,(bytes32,uint256,bytes32,uint256,bytes32[],string,bytes,bytes)),(bytes32,bytes32,bytes32,bytes,bytes,bytes),bool))
func (_AmendRequest *AmendRequestCallerSession) GetAmendRequest(_documentId *big.Int, _requestId *big.Int) (IAmendRequestRequest, error) {
	return _AmendRequest.Contract.GetAmendRequest(&_AmendRequest.CallOpts, _documentId, _requestId)
}

// IsApproved is a free data retrieval call binding the contract method 0xbf276511.
//
// Solidity: function isApproved(uint256 _documentId, uint256 _requestId) view returns(bool)
func (_AmendRequest *AmendRequestCaller) IsApproved(opts *bind.CallOpts, _documentId *big.Int, _requestId *big.Int) (bool, error) {
	var out []interface{}
	err := _AmendRequest.contract.Call(opts, &out, "isApproved", _documentId, _requestId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApproved is a free data retrieval call binding the contract method 0xbf276511.
//
// Solidity: function isApproved(uint256 _documentId, uint256 _requestId) view returns(bool)
func (_AmendRequest *AmendRequestSession) IsApproved(_documentId *big.Int, _requestId *big.Int) (bool, error) {
	return _AmendRequest.Contract.IsApproved(&_AmendRequest.CallOpts, _documentId, _requestId)
}

// IsApproved is a free data retrieval call binding the contract method 0xbf276511.
//
// Solidity: function isApproved(uint256 _documentId, uint256 _requestId) view returns(bool)
func (_AmendRequest *AmendRequestCallerSession) IsApproved(_documentId *big.Int, _requestId *big.Int) (bool, error) {
	return _AmendRequest.Contract.IsApproved(&_AmendRequest.CallOpts, _documentId, _requestId)
}

// IsFulfilled is a free data retrieval call binding the contract method 0x9f3fc6d3.
//
// Solidity: function isFulfilled(uint256 _documentId, uint256 _requestId) view returns(bool)
func (_AmendRequest *AmendRequestCaller) IsFulfilled(opts *bind.CallOpts, _documentId *big.Int, _requestId *big.Int) (bool, error) {
	var out []interface{}
	err := _AmendRequest.contract.Call(opts, &out, "isFulfilled", _documentId, _requestId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsFulfilled is a free data retrieval call binding the contract method 0x9f3fc6d3.
//
// Solidity: function isFulfilled(uint256 _documentId, uint256 _requestId) view returns(bool)
func (_AmendRequest *AmendRequestSession) IsFulfilled(_documentId *big.Int, _requestId *big.Int) (bool, error) {
	return _AmendRequest.Contract.IsFulfilled(&_AmendRequest.CallOpts, _documentId, _requestId)
}

// IsFulfilled is a free data retrieval call binding the contract method 0x9f3fc6d3.
//
// Solidity: function isFulfilled(uint256 _documentId, uint256 _requestId) view returns(bool)
func (_AmendRequest *AmendRequestCallerSession) IsFulfilled(_documentId *big.Int, _requestId *big.Int) (bool, error) {
	return _AmendRequest.Contract.IsFulfilled(&_AmendRequest.CallOpts, _documentId, _requestId)
}

// IsProposer is a free data retrieval call binding the contract method 0x856b909b.
//
// Solidity: function isProposer(uint256 _documentId, uint256 _requestId, address _executor) view returns(bool)
func (_AmendRequest *AmendRequestCaller) IsProposer(opts *bind.CallOpts, _documentId *big.Int, _requestId *big.Int, _executor common.Address) (bool, error) {
	var out []interface{}
	err := _AmendRequest.contract.Call(opts, &out, "isProposer", _documentId, _requestId, _executor)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsProposer is a free data retrieval call binding the contract method 0x856b909b.
//
// Solidity: function isProposer(uint256 _documentId, uint256 _requestId, address _executor) view returns(bool)
func (_AmendRequest *AmendRequestSession) IsProposer(_documentId *big.Int, _requestId *big.Int, _executor common.Address) (bool, error) {
	return _AmendRequest.Contract.IsProposer(&_AmendRequest.CallOpts, _documentId, _requestId, _executor)
}

// IsProposer is a free data retrieval call binding the contract method 0x856b909b.
//
// Solidity: function isProposer(uint256 _documentId, uint256 _requestId, address _executor) view returns(bool)
func (_AmendRequest *AmendRequestCallerSession) IsProposer(_documentId *big.Int, _requestId *big.Int, _executor common.Address) (bool, error) {
	return _AmendRequest.Contract.IsProposer(&_AmendRequest.CallOpts, _documentId, _requestId, _executor)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_AmendRequest *AmendRequestCaller) Nonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AmendRequest.contract.Call(opts, &out, "nonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_AmendRequest *AmendRequestSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _AmendRequest.Contract.Nonces(&_AmendRequest.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_AmendRequest *AmendRequestCallerSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _AmendRequest.Contract.Nonces(&_AmendRequest.CallOpts, arg0)
}

// Approve is a paid mutator transaction binding the contract method 0xa687be52.
//
// Solidity: function approve(uint256 _documentId, uint256 _requestId, address _approver, bytes _signature) returns()
func (_AmendRequest *AmendRequestTransactor) Approve(opts *bind.TransactOpts, _documentId *big.Int, _requestId *big.Int, _approver common.Address, _signature []byte) (*types.Transaction, error) {
	return _AmendRequest.contract.Transact(opts, "approve", _documentId, _requestId, _approver, _signature)
}

// Approve is a paid mutator transaction binding the contract method 0xa687be52.
//
// Solidity: function approve(uint256 _documentId, uint256 _requestId, address _approver, bytes _signature) returns()
func (_AmendRequest *AmendRequestSession) Approve(_documentId *big.Int, _requestId *big.Int, _approver common.Address, _signature []byte) (*types.Transaction, error) {
	return _AmendRequest.Contract.Approve(&_AmendRequest.TransactOpts, _documentId, _requestId, _approver, _signature)
}

// Approve is a paid mutator transaction binding the contract method 0xa687be52.
//
// Solidity: function approve(uint256 _documentId, uint256 _requestId, address _approver, bytes _signature) returns()
func (_AmendRequest *AmendRequestTransactorSession) Approve(_documentId *big.Int, _requestId *big.Int, _approver common.Address, _signature []byte) (*types.Transaction, error) {
	return _AmendRequest.Contract.Approve(&_AmendRequest.TransactOpts, _documentId, _requestId, _approver, _signature)
}

// Fulfilled is a paid mutator transaction binding the contract method 0x00ebf111.
//
// Solidity: function fulfilled(uint256 _documentId, uint256 _requestId) returns()
func (_AmendRequest *AmendRequestTransactor) Fulfilled(opts *bind.TransactOpts, _documentId *big.Int, _requestId *big.Int) (*types.Transaction, error) {
	return _AmendRequest.contract.Transact(opts, "fulfilled", _documentId, _requestId)
}

// Fulfilled is a paid mutator transaction binding the contract method 0x00ebf111.
//
// Solidity: function fulfilled(uint256 _documentId, uint256 _requestId) returns()
func (_AmendRequest *AmendRequestSession) Fulfilled(_documentId *big.Int, _requestId *big.Int) (*types.Transaction, error) {
	return _AmendRequest.Contract.Fulfilled(&_AmendRequest.TransactOpts, _documentId, _requestId)
}

// Fulfilled is a paid mutator transaction binding the contract method 0x00ebf111.
//
// Solidity: function fulfilled(uint256 _documentId, uint256 _requestId) returns()
func (_AmendRequest *AmendRequestTransactorSession) Fulfilled(_documentId *big.Int, _requestId *big.Int) (*types.Transaction, error) {
	return _AmendRequest.Contract.Fulfilled(&_AmendRequest.TransactOpts, _documentId, _requestId)
}

// SetAMC is a paid mutator transaction binding the contract method 0x171cba35.
//
// Solidity: function setAMC(address _amc) returns()
func (_AmendRequest *AmendRequestTransactor) SetAMC(opts *bind.TransactOpts, _amc common.Address) (*types.Transaction, error) {
	return _AmendRequest.contract.Transact(opts, "setAMC", _amc)
}

// SetAMC is a paid mutator transaction binding the contract method 0x171cba35.
//
// Solidity: function setAMC(address _amc) returns()
func (_AmendRequest *AmendRequestSession) SetAMC(_amc common.Address) (*types.Transaction, error) {
	return _AmendRequest.Contract.SetAMC(&_AmendRequest.TransactOpts, _amc)
}

// SetAMC is a paid mutator transaction binding the contract method 0x171cba35.
//
// Solidity: function setAMC(address _amc) returns()
func (_AmendRequest *AmendRequestTransactorSession) SetAMC(_amc common.Address) (*types.Transaction, error) {
	return _AmendRequest.Contract.SetAMC(&_AmendRequest.TransactOpts, _amc)
}

// Submit is a paid mutator transaction binding the contract method 0xdf879220.
//
// Solidity: function submit(uint256 _documentId, address _proposer, bytes32[] _migratingStages, (uint256,uint256,(bytes32,uint256,bytes32,uint256,bytes32[],string,bytes,bytes)) _amendStage, bytes _signature) returns()
func (_AmendRequest *AmendRequestTransactor) Submit(opts *bind.TransactOpts, _documentId *big.Int, _proposer common.Address, _migratingStages [][32]byte, _amendStage IAmendRequestAmendStage, _signature []byte) (*types.Transaction, error) {
	return _AmendRequest.contract.Transact(opts, "submit", _documentId, _proposer, _migratingStages, _amendStage, _signature)
}

// Submit is a paid mutator transaction binding the contract method 0xdf879220.
//
// Solidity: function submit(uint256 _documentId, address _proposer, bytes32[] _migratingStages, (uint256,uint256,(bytes32,uint256,bytes32,uint256,bytes32[],string,bytes,bytes)) _amendStage, bytes _signature) returns()
func (_AmendRequest *AmendRequestSession) Submit(_documentId *big.Int, _proposer common.Address, _migratingStages [][32]byte, _amendStage IAmendRequestAmendStage, _signature []byte) (*types.Transaction, error) {
	return _AmendRequest.Contract.Submit(&_AmendRequest.TransactOpts, _documentId, _proposer, _migratingStages, _amendStage, _signature)
}

// Submit is a paid mutator transaction binding the contract method 0xdf879220.
//
// Solidity: function submit(uint256 _documentId, address _proposer, bytes32[] _migratingStages, (uint256,uint256,(bytes32,uint256,bytes32,uint256,bytes32[],string,bytes,bytes)) _amendStage, bytes _signature) returns()
func (_AmendRequest *AmendRequestTransactorSession) Submit(_documentId *big.Int, _proposer common.Address, _migratingStages [][32]byte, _amendStage IAmendRequestAmendStage, _signature []byte) (*types.Transaction, error) {
	return _AmendRequest.Contract.Submit(&_AmendRequest.TransactOpts, _documentId, _proposer, _migratingStages, _amendStage, _signature)
}

// AmendRequestApprovedAmendmentIterator is returned from FilterApprovedAmendment and is used to iterate over the raw logs and unpacked data for ApprovedAmendment events raised by the AmendRequest contract.
type AmendRequestApprovedAmendmentIterator struct {
	Event *AmendRequestApprovedAmendment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AmendRequestApprovedAmendmentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AmendRequestApprovedAmendment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AmendRequestApprovedAmendment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AmendRequestApprovedAmendmentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AmendRequestApprovedAmendmentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AmendRequestApprovedAmendment represents a ApprovedAmendment event raised by the AmendRequest contract.
type AmendRequestApprovedAmendment struct {
	DocumentId *big.Int
	RequestId  *big.Int
	Approver   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterApprovedAmendment is a free log retrieval operation binding the contract event 0xe8bf39464f4f533619fa362b4e80c90fba7d4527115ffe466472fdc52f977109.
//
// Solidity: event ApprovedAmendment(uint256 indexed documentId, uint256 indexed requestId, address indexed approver)
func (_AmendRequest *AmendRequestFilterer) FilterApprovedAmendment(opts *bind.FilterOpts, documentId []*big.Int, requestId []*big.Int, approver []common.Address) (*AmendRequestApprovedAmendmentIterator, error) {

	var documentIdRule []interface{}
	for _, documentIdItem := range documentId {
		documentIdRule = append(documentIdRule, documentIdItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}
	var approverRule []interface{}
	for _, approverItem := range approver {
		approverRule = append(approverRule, approverItem)
	}

	logs, sub, err := _AmendRequest.contract.FilterLogs(opts, "ApprovedAmendment", documentIdRule, requestIdRule, approverRule)
	if err != nil {
		return nil, err
	}
	return &AmendRequestApprovedAmendmentIterator{contract: _AmendRequest.contract, event: "ApprovedAmendment", logs: logs, sub: sub}, nil
}

var ApprovedAmendmentTopicHash = "0xe8bf39464f4f533619fa362b4e80c90fba7d4527115ffe466472fdc52f977109"

// WatchApprovedAmendment is a free log subscription operation binding the contract event 0xe8bf39464f4f533619fa362b4e80c90fba7d4527115ffe466472fdc52f977109.
//
// Solidity: event ApprovedAmendment(uint256 indexed documentId, uint256 indexed requestId, address indexed approver)
func (_AmendRequest *AmendRequestFilterer) WatchApprovedAmendment(opts *bind.WatchOpts, sink chan<- *AmendRequestApprovedAmendment, documentId []*big.Int, requestId []*big.Int, approver []common.Address) (event.Subscription, error) {

	var documentIdRule []interface{}
	for _, documentIdItem := range documentId {
		documentIdRule = append(documentIdRule, documentIdItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}
	var approverRule []interface{}
	for _, approverItem := range approver {
		approverRule = append(approverRule, approverItem)
	}

	logs, sub, err := _AmendRequest.contract.WatchLogs(opts, "ApprovedAmendment", documentIdRule, requestIdRule, approverRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AmendRequestApprovedAmendment)
				if err := _AmendRequest.contract.UnpackLog(event, "ApprovedAmendment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovedAmendment is a log parse operation binding the contract event 0xe8bf39464f4f533619fa362b4e80c90fba7d4527115ffe466472fdc52f977109.
//
// Solidity: event ApprovedAmendment(uint256 indexed documentId, uint256 indexed requestId, address indexed approver)
func (_AmendRequest *AmendRequestFilterer) ParseApprovedAmendment(log types.Log) (*AmendRequestApprovedAmendment, error) {
	event := new(AmendRequestApprovedAmendment)
	if err := _AmendRequest.contract.UnpackLog(event, "ApprovedAmendment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AmendRequestSubmittedAmendmentIterator is returned from FilterSubmittedAmendment and is used to iterate over the raw logs and unpacked data for SubmittedAmendment events raised by the AmendRequest contract.
type AmendRequestSubmittedAmendmentIterator struct {
	Event *AmendRequestSubmittedAmendment // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AmendRequestSubmittedAmendmentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AmendRequestSubmittedAmendment)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AmendRequestSubmittedAmendment)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AmendRequestSubmittedAmendmentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AmendRequestSubmittedAmendmentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AmendRequestSubmittedAmendment represents a SubmittedAmendment event raised by the AmendRequest contract.
type AmendRequestSubmittedAmendment struct {
	Proposer   common.Address
	DocumentId *big.Int
	Nonce      *big.Int
	RequestId  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSubmittedAmendment is a free log retrieval operation binding the contract event 0x5613f7bdb7de0b9e304bd3206cfe56e5fbe6132fb78f885650b90e5ae6608810.
//
// Solidity: event SubmittedAmendment(address indexed proposer, uint256 indexed documentId, uint256 indexed nonce, uint256 requestId)
func (_AmendRequest *AmendRequestFilterer) FilterSubmittedAmendment(opts *bind.FilterOpts, proposer []common.Address, documentId []*big.Int, nonce []*big.Int) (*AmendRequestSubmittedAmendmentIterator, error) {

	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}
	var documentIdRule []interface{}
	for _, documentIdItem := range documentId {
		documentIdRule = append(documentIdRule, documentIdItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _AmendRequest.contract.FilterLogs(opts, "SubmittedAmendment", proposerRule, documentIdRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return &AmendRequestSubmittedAmendmentIterator{contract: _AmendRequest.contract, event: "SubmittedAmendment", logs: logs, sub: sub}, nil
}

var SubmittedAmendmentTopicHash = "0x5613f7bdb7de0b9e304bd3206cfe56e5fbe6132fb78f885650b90e5ae6608810"

// WatchSubmittedAmendment is a free log subscription operation binding the contract event 0x5613f7bdb7de0b9e304bd3206cfe56e5fbe6132fb78f885650b90e5ae6608810.
//
// Solidity: event SubmittedAmendment(address indexed proposer, uint256 indexed documentId, uint256 indexed nonce, uint256 requestId)
func (_AmendRequest *AmendRequestFilterer) WatchSubmittedAmendment(opts *bind.WatchOpts, sink chan<- *AmendRequestSubmittedAmendment, proposer []common.Address, documentId []*big.Int, nonce []*big.Int) (event.Subscription, error) {

	var proposerRule []interface{}
	for _, proposerItem := range proposer {
		proposerRule = append(proposerRule, proposerItem)
	}
	var documentIdRule []interface{}
	for _, documentIdItem := range documentId {
		documentIdRule = append(documentIdRule, documentIdItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _AmendRequest.contract.WatchLogs(opts, "SubmittedAmendment", proposerRule, documentIdRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AmendRequestSubmittedAmendment)
				if err := _AmendRequest.contract.UnpackLog(event, "SubmittedAmendment", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmittedAmendment is a log parse operation binding the contract event 0x5613f7bdb7de0b9e304bd3206cfe56e5fbe6132fb78f885650b90e5ae6608810.
//
// Solidity: event SubmittedAmendment(address indexed proposer, uint256 indexed documentId, uint256 indexed nonce, uint256 requestId)
func (_AmendRequest *AmendRequestFilterer) ParseSubmittedAmendment(log types.Log) (*AmendRequestSubmittedAmendment, error) {
	event := new(AmendRequestSubmittedAmendment)
	if err := _AmendRequest.contract.UnpackLog(event, "SubmittedAmendment", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
