// Code generated by MockGen. DO NOT EDIT.
// Source: caching_proxy.go

// Package qlightptm is a generated GoMock package.
package qlightptm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRPCClientCaller is a mock of RPCClientCaller interface.
type MockRPCClientCaller struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientCallerMockRecorder
}

// MockRPCClientCallerMockRecorder is the mock recorder for MockRPCClientCaller.
type MockRPCClientCallerMockRecorder struct {
	mock *MockRPCClientCaller
}

// NewMockRPCClientCaller creates a new mock instance.
func NewMockRPCClientCaller(ctrl *gomock.Controller) *MockRPCClientCaller {
	mock := &MockRPCClientCaller{ctrl: ctrl}
	mock.recorder = &MockRPCClientCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCClientCaller) EXPECT() *MockRPCClientCallerMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockRPCClientCaller) Call(result interface{}, method string, args ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{result, method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockRPCClientCallerMockRecorder) Call(result, method interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{result, method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockRPCClientCaller)(nil).Call), varargs...)
}
